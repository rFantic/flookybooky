// Code generated by ent, DO NOT EDIT.

package flight

import (
	"flookybooky/flight/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldName, v))
}

// FromID applies equality check predicate on the "from_id" field. It's identical to FromIDEQ.
func FromID(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldFromID, v))
}

// ToID applies equality check predicate on the "to_id" field. It's identical to ToIDEQ.
func ToID(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldToID, v))
}

// Start applies equality check predicate on the "start" field. It's identical to StartEQ.
func Start(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldStart, v))
}

// End applies equality check predicate on the "end" field. It's identical to EndEQ.
func End(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldEnd, v))
}

// AvailableSlots applies equality check predicate on the "available_slots" field. It's identical to AvailableSlotsEQ.
func AvailableSlots(v int) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldAvailableSlots, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Flight {
	return predicate.Flight(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Flight {
	return predicate.Flight(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Flight {
	return predicate.Flight(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Flight {
	return predicate.Flight(sql.FieldContainsFold(FieldName, v))
}

// FromIDEQ applies the EQ predicate on the "from_id" field.
func FromIDEQ(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldFromID, v))
}

// FromIDNEQ applies the NEQ predicate on the "from_id" field.
func FromIDNEQ(v string) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldFromID, v))
}

// FromIDIn applies the In predicate on the "from_id" field.
func FromIDIn(vs ...string) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldFromID, vs...))
}

// FromIDNotIn applies the NotIn predicate on the "from_id" field.
func FromIDNotIn(vs ...string) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldFromID, vs...))
}

// FromIDGT applies the GT predicate on the "from_id" field.
func FromIDGT(v string) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldFromID, v))
}

// FromIDGTE applies the GTE predicate on the "from_id" field.
func FromIDGTE(v string) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldFromID, v))
}

// FromIDLT applies the LT predicate on the "from_id" field.
func FromIDLT(v string) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldFromID, v))
}

// FromIDLTE applies the LTE predicate on the "from_id" field.
func FromIDLTE(v string) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldFromID, v))
}

// FromIDContains applies the Contains predicate on the "from_id" field.
func FromIDContains(v string) predicate.Flight {
	return predicate.Flight(sql.FieldContains(FieldFromID, v))
}

// FromIDHasPrefix applies the HasPrefix predicate on the "from_id" field.
func FromIDHasPrefix(v string) predicate.Flight {
	return predicate.Flight(sql.FieldHasPrefix(FieldFromID, v))
}

// FromIDHasSuffix applies the HasSuffix predicate on the "from_id" field.
func FromIDHasSuffix(v string) predicate.Flight {
	return predicate.Flight(sql.FieldHasSuffix(FieldFromID, v))
}

// FromIDEqualFold applies the EqualFold predicate on the "from_id" field.
func FromIDEqualFold(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEqualFold(FieldFromID, v))
}

// FromIDContainsFold applies the ContainsFold predicate on the "from_id" field.
func FromIDContainsFold(v string) predicate.Flight {
	return predicate.Flight(sql.FieldContainsFold(FieldFromID, v))
}

// ToIDEQ applies the EQ predicate on the "to_id" field.
func ToIDEQ(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldToID, v))
}

// ToIDNEQ applies the NEQ predicate on the "to_id" field.
func ToIDNEQ(v string) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldToID, v))
}

// ToIDIn applies the In predicate on the "to_id" field.
func ToIDIn(vs ...string) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldToID, vs...))
}

// ToIDNotIn applies the NotIn predicate on the "to_id" field.
func ToIDNotIn(vs ...string) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldToID, vs...))
}

// ToIDGT applies the GT predicate on the "to_id" field.
func ToIDGT(v string) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldToID, v))
}

// ToIDGTE applies the GTE predicate on the "to_id" field.
func ToIDGTE(v string) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldToID, v))
}

// ToIDLT applies the LT predicate on the "to_id" field.
func ToIDLT(v string) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldToID, v))
}

// ToIDLTE applies the LTE predicate on the "to_id" field.
func ToIDLTE(v string) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldToID, v))
}

// ToIDContains applies the Contains predicate on the "to_id" field.
func ToIDContains(v string) predicate.Flight {
	return predicate.Flight(sql.FieldContains(FieldToID, v))
}

// ToIDHasPrefix applies the HasPrefix predicate on the "to_id" field.
func ToIDHasPrefix(v string) predicate.Flight {
	return predicate.Flight(sql.FieldHasPrefix(FieldToID, v))
}

// ToIDHasSuffix applies the HasSuffix predicate on the "to_id" field.
func ToIDHasSuffix(v string) predicate.Flight {
	return predicate.Flight(sql.FieldHasSuffix(FieldToID, v))
}

// ToIDEqualFold applies the EqualFold predicate on the "to_id" field.
func ToIDEqualFold(v string) predicate.Flight {
	return predicate.Flight(sql.FieldEqualFold(FieldToID, v))
}

// ToIDContainsFold applies the ContainsFold predicate on the "to_id" field.
func ToIDContainsFold(v string) predicate.Flight {
	return predicate.Flight(sql.FieldContainsFold(FieldToID, v))
}

// StartEQ applies the EQ predicate on the "start" field.
func StartEQ(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldStart, v))
}

// StartNEQ applies the NEQ predicate on the "start" field.
func StartNEQ(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldStart, v))
}

// StartIn applies the In predicate on the "start" field.
func StartIn(vs ...time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldStart, vs...))
}

// StartNotIn applies the NotIn predicate on the "start" field.
func StartNotIn(vs ...time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldStart, vs...))
}

// StartGT applies the GT predicate on the "start" field.
func StartGT(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldStart, v))
}

// StartGTE applies the GTE predicate on the "start" field.
func StartGTE(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldStart, v))
}

// StartLT applies the LT predicate on the "start" field.
func StartLT(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldStart, v))
}

// StartLTE applies the LTE predicate on the "start" field.
func StartLTE(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldStart, v))
}

// EndEQ applies the EQ predicate on the "end" field.
func EndEQ(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldEnd, v))
}

// EndNEQ applies the NEQ predicate on the "end" field.
func EndNEQ(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldEnd, v))
}

// EndIn applies the In predicate on the "end" field.
func EndIn(vs ...time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldEnd, vs...))
}

// EndNotIn applies the NotIn predicate on the "end" field.
func EndNotIn(vs ...time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldEnd, vs...))
}

// EndGT applies the GT predicate on the "end" field.
func EndGT(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldEnd, v))
}

// EndGTE applies the GTE predicate on the "end" field.
func EndGTE(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldEnd, v))
}

// EndLT applies the LT predicate on the "end" field.
func EndLT(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldEnd, v))
}

// EndLTE applies the LTE predicate on the "end" field.
func EndLTE(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldEnd, v))
}

// AvailableSlotsEQ applies the EQ predicate on the "available_slots" field.
func AvailableSlotsEQ(v int) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldAvailableSlots, v))
}

// AvailableSlotsNEQ applies the NEQ predicate on the "available_slots" field.
func AvailableSlotsNEQ(v int) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldAvailableSlots, v))
}

// AvailableSlotsIn applies the In predicate on the "available_slots" field.
func AvailableSlotsIn(vs ...int) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldAvailableSlots, vs...))
}

// AvailableSlotsNotIn applies the NotIn predicate on the "available_slots" field.
func AvailableSlotsNotIn(vs ...int) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldAvailableSlots, vs...))
}

// AvailableSlotsGT applies the GT predicate on the "available_slots" field.
func AvailableSlotsGT(v int) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldAvailableSlots, v))
}

// AvailableSlotsGTE applies the GTE predicate on the "available_slots" field.
func AvailableSlotsGTE(v int) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldAvailableSlots, v))
}

// AvailableSlotsLT applies the LT predicate on the "available_slots" field.
func AvailableSlotsLT(v int) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldAvailableSlots, v))
}

// AvailableSlotsLTE applies the LTE predicate on the "available_slots" field.
func AvailableSlotsLTE(v int) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldAvailableSlots, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Flight {
	return predicate.Flight(sql.FieldLTE(FieldCreatedAt, v))
}

// HasSeats applies the HasEdge predicate on the "seats" edge.
func HasSeats() predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SeatsTable, SeatsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeatsWith applies the HasEdge predicate on the "seats" edge with a given conditions (other predicates).
func HasSeatsWith(preds ...predicate.Seat) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		step := newSeatsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Flight) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Flight) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Flight) predicate.Flight {
	return predicate.Flight(func(s *sql.Selector) {
		p(s.Not())
	})
}
