directive @hasRoles(roles: [Role]!) on FIELD_DEFINITION

enum Role {
    admin
    user
}

type User {
    id: ID!
    username: String!
    email: String!
    role: String!
    customer: Customer
}

input UserInput {
    username: String!
    password: String!
    email: String!
    role: String!
    customer: CustomerInput
}

input UserUpdateInput {
    id: ID!
    email: String
    role: String
}

input PasswordUpdateInput {
    id: ID!
    previous_password: String!
    new_password: String!
}

input LoginInput {
    username: String!
    password: String!
}

type LoginInfo {
    tokenString: String!
}

extend type Mutation {
    register(input: UserInput!): User!
    updateUser(input: UserUpdateInput!): Boolean! @hasRoles(roles: [admin])
    updatePassword(input: PasswordUpdateInput!): Boolean! @hasRoles(roles: [user, admin])
}

extend type Query {
    users(input: Pagination): [User!]! @hasRoles(roles: [admin])
    login(input: LoginInput!): LoginInfo!
    logout: Boolean!
}