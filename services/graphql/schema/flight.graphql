enum FlightStatus{
    Cancelled
    Departed
    Landed
    Scheduled
    Delayed
}

type Flight {
    id: String!
    name: String!
    origin: Airport!
    destination: Airport!
    total_slots: Int!
    available_slots: Int!
    departure_time: String!
    arrival_time: String!
    status: String!
}

input FlightInput{
    name: String!
    originId: String!
    destinationId: String!
    total_slots: Int!
    departure_time: String!
    arrival_time: String!
    status: FlightStatus!
}

input FlightUpdateInput{
    id: String!
    name: String
    originId: String
    destinationId: String
    total_slots: Int
    departure_time: String
    arrival_time: String
    status: FlightStatus
}

input FlightCancelInput {
    id: String!
}

extend type Query {
    flight(input: Pagination): [Flight!]! @hasRoles(roles: [user, admin])
    cancelFlight(input: FlightCancelInput): Boolean! @hasRoles(roles: [admin])
}

extend type Mutation {
    createFlight(input: FlightInput!): Flight! @hasRoles(roles: [admin])
    updateFlight(input: FlightUpdateInput!): Boolean! @hasRoles(roles: [admin])
}