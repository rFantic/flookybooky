// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Airport struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Address string `json:"address"`
}

type AirportInput struct {
	Name    string `json:"name"`
	Address string `json:"address"`
}

type Booking struct {
	ID           string    `json:"id"`
	GoingFlight  *Flight   `json:"going_flight"`
	ReturnFlight *Flight   `json:"return_flight,omitempty"`
	Customer     *Customer `json:"customer"`
}

type BookingInput struct {
	CustomerID     string  `json:"customerId"`
	GoingFlightID  string  `json:"goingFlightId"`
	ReturnFlightID *string `json:"returnFlightId,omitempty"`
}

type Customer struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Address     string `json:"address"`
	LicenseID   string `json:"license_id"`
	PhoneNumber string `json:"phone_number"`
	Email       string `json:"email"`
}

type CustomerInput struct {
	Name        string `json:"name"`
	Address     string `json:"address"`
	LicenseID   string `json:"license_id"`
	PhoneNumber string `json:"phone_number"`
	Email       string `json:"email"`
}

type Flight struct {
	ID             string   `json:"id"`
	Name           string   `json:"name"`
	Origin         *Airport `json:"origin"`
	Destination    *Airport `json:"destination"`
	AvailableSlots int      `json:"available_slots"`
	DepartureTime  string   `json:"departure_time"`
	ArrivalTime    string   `json:"arrival_time"`
}

type FlightInput struct {
	Name           string `json:"name"`
	OriginID       string `json:"originId"`
	DestinationID  string `json:"destinationId"`
	AvailableSlots int    `json:"available_slots"`
	DepartureTime  string `json:"departure_time"`
	ArrivalTime    string `json:"arrival_time"`
}

type LoginInfo struct {
	TokenString string `json:"tokenString"`
}

type LoginInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type User struct {
	ID       string    `json:"id"`
	Username string    `json:"username"`
	Email    string    `json:"email"`
	Role     string    `json:"role"`
	Customer *Customer `json:"customer,omitempty"`
}

type UserInput struct {
	Username string         `json:"username"`
	Password string         `json:"password"`
	Email    string         `json:"email"`
	Role     string         `json:"role"`
	Customer *CustomerInput `json:"customer,omitempty"`
}

type Role string

const (
	RoleAdmin Role = "admin"
	RoleUser  Role = "user"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
