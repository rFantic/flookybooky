// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Airport struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Address string `json:"address"`
}

type AirportInput struct {
	Name    string `json:"name"`
	Address string `json:"address"`
}

type Booking struct {
	ID           string    `json:"id"`
	GoingTicket  *Ticket   `json:"going_ticket"`
	ReturnTicket *Ticket   `json:"return_ticket,omitempty"`
	Customer     *Customer `json:"customer"`
	Status       string    `json:"status"`
}

type BookingInput struct {
	CustomerID   string       `json:"customerId"`
	GoingTicket  *TicketInput `json:"goingTicket"`
	ReturnTicket *TicketInput `json:"returnTicket,omitempty"`
	Status       string       `json:"status"`
}

type Customer struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Address     string `json:"address"`
	LicenseID   string `json:"license_id"`
	PhoneNumber string `json:"phone_number"`
	Email       string `json:"email"`
}

type CustomerInput struct {
	Name        string `json:"name"`
	Address     string `json:"address"`
	LicenseID   string `json:"license_id"`
	PhoneNumber string `json:"phone_number"`
	Email       string `json:"email"`
}

type CustomerUpdateInput struct {
	ID          string  `json:"id"`
	Name        *string `json:"name,omitempty"`
	Address     *string `json:"address,omitempty"`
	LicenseID   *string `json:"license_id,omitempty"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	Email       *string `json:"email,omitempty"`
}

type Flight struct {
	ID             string   `json:"id"`
	Name           string   `json:"name"`
	Origin         *Airport `json:"origin"`
	Destination    *Airport `json:"destination"`
	AvailableSlots int      `json:"available_slots"`
	DepartureTime  string   `json:"departure_time"`
	ArrivalTime    string   `json:"arrival_time"`
	Status         string   `json:"status"`
}

type FlightInput struct {
	Name           string       `json:"name"`
	OriginID       string       `json:"originId"`
	DestinationID  string       `json:"destinationId"`
	AvailableSlots int          `json:"available_slots"`
	DepartureTime  string       `json:"departure_time"`
	ArrivalTime    string       `json:"arrival_time"`
	Status         FlightStatus `json:"status"`
}

type FlightUpdateInput struct {
	ID             string        `json:"id"`
	Name           *string       `json:"name,omitempty"`
	OriginID       *string       `json:"originId,omitempty"`
	DestinationID  *string       `json:"destinationId,omitempty"`
	AvailableSlots *int          `json:"available_slots,omitempty"`
	DepartureTime  *string       `json:"departure_time,omitempty"`
	ArrivalTime    *string       `json:"arrival_time,omitempty"`
	Status         *FlightStatus `json:"status,omitempty"`
}

type LoginInfo struct {
	TokenString string `json:"tokenString"`
}

type LoginInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type Pagination struct {
	AscFields []*string `json:"ascFields,omitempty"`
	DesFields []*string `json:"desFields,omitempty"`
	Limit     *int      `json:"limit,omitempty"`
	Offset    *int      `json:"offset,omitempty"`
}

type PasswordUpdateInput struct {
	ID               string `json:"id"`
	PreviousPassword string `json:"previous_password"`
	NewPassword      string `json:"new_password"`
}

type Ticket struct {
	ID                 string       `json:"id"`
	Status             TicketStatus `json:"status"`
	Flight             *Flight      `json:"flight"`
	PassengerLicenseID string       `json:"passenger_license_id"`
	PassengerName      string       `json:"passenger_name"`
	PassengerEmail     string       `json:"passenger_email"`
	SeatNumber         string       `json:"seat_number"`
	TicketClass        TicketClass  `json:"ticket_class"`
}

type TicketInput struct {
	Status             TicketStatus `json:"status"`
	FlightID           string       `json:"flight_id"`
	PassengerLicenseID string       `json:"passenger_license_id"`
	PassengerName      string       `json:"passenger_name"`
	PassengerEmail     string       `json:"passenger_email"`
	SeatNumber         string       `json:"seat_number"`
	TicketClass        TicketClass  `json:"ticket_class"`
}

type User struct {
	ID       string    `json:"id"`
	Username string    `json:"username"`
	Email    string    `json:"email"`
	Role     string    `json:"role"`
	Customer *Customer `json:"customer,omitempty"`
}

type UserInput struct {
	Username string         `json:"username"`
	Password string         `json:"password"`
	Email    string         `json:"email"`
	Role     string         `json:"role"`
	Customer *CustomerInput `json:"customer,omitempty"`
}

type UserUpdateInput struct {
	ID    string  `json:"id"`
	Email *string `json:"email,omitempty"`
	Role  *string `json:"role,omitempty"`
}

type FlightStatus string

const (
	FlightStatusCanceled  FlightStatus = "Canceled"
	FlightStatusDeparted  FlightStatus = "Departed"
	FlightStatusLanded    FlightStatus = "Landed"
	FlightStatusScheduled FlightStatus = "Scheduled"
	FlightStatusDelayed   FlightStatus = "Delayed"
)

var AllFlightStatus = []FlightStatus{
	FlightStatusCanceled,
	FlightStatusDeparted,
	FlightStatusLanded,
	FlightStatusScheduled,
	FlightStatusDelayed,
}

func (e FlightStatus) IsValid() bool {
	switch e {
	case FlightStatusCanceled, FlightStatusDeparted, FlightStatusLanded, FlightStatusScheduled, FlightStatusDelayed:
		return true
	}
	return false
}

func (e FlightStatus) String() string {
	return string(e)
}

func (e *FlightStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FlightStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FlightStatus", str)
	}
	return nil
}

func (e FlightStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin Role = "admin"
	RoleUser  Role = "user"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TicketClass string

const (
	TicketClassFirstClass    TicketClass = "FirstClass"
	TicketClassBusinessClass TicketClass = "BusinessClass"
	TicketClassEconomyClass  TicketClass = "EconomyClass"
)

var AllTicketClass = []TicketClass{
	TicketClassFirstClass,
	TicketClassBusinessClass,
	TicketClassEconomyClass,
}

func (e TicketClass) IsValid() bool {
	switch e {
	case TicketClassFirstClass, TicketClassBusinessClass, TicketClassEconomyClass:
		return true
	}
	return false
}

func (e TicketClass) String() string {
	return string(e)
}

func (e *TicketClass) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TicketClass(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TicketClass", str)
	}
	return nil
}

func (e TicketClass) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TicketStatus string

const (
	TicketStatusCanceled  TicketStatus = "Canceled"
	TicketStatusDeparted  TicketStatus = "Departed"
	TicketStatusScheduled TicketStatus = "Scheduled"
)

var AllTicketStatus = []TicketStatus{
	TicketStatusCanceled,
	TicketStatusDeparted,
	TicketStatusScheduled,
}

func (e TicketStatus) IsValid() bool {
	switch e {
	case TicketStatusCanceled, TicketStatusDeparted, TicketStatusScheduled:
		return true
	}
	return false
}

func (e TicketStatus) String() string {
	return string(e)
}

func (e *TicketStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TicketStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TicketStatus", str)
	}
	return nil
}

func (e TicketStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
