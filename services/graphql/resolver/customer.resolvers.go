package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"flookybooky/pb"
	"flookybooky/services/graphql/model"

	"github.com/jinzhu/copier"
	"google.golang.org/protobuf/types/known/emptypb"
)

// CreateCustomer is the resolver for the createCustomer field.
func (r *mutationResolver) CreateCustomer(ctx context.Context, input model.CustomerInput) (*model.Customer, error) {
	c, err := r.client.CustomerClient.PostCustomer(ctx,
		&pb.Customer{
			Name:        input.Name,
			Address:     input.Address,
			LicenseId:   input.LicenseID,
			PhoneNumber: input.PhoneNumber,
		},
	)
	if err != nil {
		return nil, err
	}
	var res model.Customer
	copier.Copy(&res, c)
	res.LicenseID = c.LicenseId
	return &res, nil
}

// Customers is the resolver for the customers field.
func (r *queryResolver) Customers(ctx context.Context, id *string, name *string) ([]*model.Customer, error) {
	res, err := r.client.CustomerClient.GetCustomers(ctx, &emptypb.Empty{})
	if err != nil {
		return nil, err
	}
	var customers []*model.Customer
	copier.Copy(&customers, &res.Customers)
	for i, c := range customers {
		c.ID = res.Customers[i].Id
	}
	return customers, nil
}
