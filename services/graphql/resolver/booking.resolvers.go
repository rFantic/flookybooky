package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"flookybooky/pb"
	"flookybooky/services/graphql/internal"
	"flookybooky/services/graphql/model"
	"fmt"

	"google.golang.org/protobuf/types/known/emptypb"
)

// CreateBooking is the resolver for the createBooking field.
func (r *mutationResolver) CreateBooking(ctx context.Context, input model.BookingInput) (*model.Booking, error) {
	customerRes, err := r.client.CustomerClient.GetCustomer(ctx, &pb.UUID{
		Id: input.CustomerID,
	})
	if err != nil {
		return nil, err
	}
	flightRes, err := r.client.FlightClient.GetFlight(ctx, &pb.UUID{
		Id: input.FlightID,
	})
	if err != nil {
		return nil, err
	}
	if customerRes == nil || flightRes == nil {
		return nil, fmt.Errorf("wrong customer id or flight id")
	}
	bookingRes, err := r.client.BookingClient.PostBooking(ctx, internal.ParseBookingInputGraphqlToPb(&input))
	return internal.ParseBookingPbToGraphql(bookingRes), err
}

// Booking is the resolver for the booking field.
func (r *queryResolver) Booking(ctx context.Context) ([]*model.Booking, error) {
	bookingsRes, err := r.client.BookingClient.GetBookings(ctx, &emptypb.Empty{})
	return internal.ParseBookingsPbToGraphql(bookingsRes), err
}
