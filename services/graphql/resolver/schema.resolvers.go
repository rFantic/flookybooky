package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"flookybooky/services/graphql/gql_generated"
	"flookybooky/services/graphql/model"
	pb "flookybooky/services/graphql/proto"

	"github.com/jinzhu/copier"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*model.User, error) {
	res, err := r.client.UserClient.PostUser(ctx,
		&pb.PostUserRequest{
			Username: input.Username,
			Password: input.Password,
		},
	)
	if err != nil {
		return nil, err
	}
	var user model.User
	copier.Copy(&user, res.GetUser())
	return &user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	res, err := r.client.UserClient.GetUsers(ctx, &pb.GetUsersRequest{})
	if err != nil {
		return nil, err
	}
	var users []*model.User
	copier.Copy(&users, &res.Users)
	return users, nil
}

// Mutation returns gql_generated.MutationResolver implementation.
func (r *Resolver) Mutation() gql_generated.MutationResolver { return &mutationResolver{r} }

// Query returns gql_generated.QueryResolver implementation.
func (r *Resolver) Query() gql_generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
