package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"flookybooky/internal/util"
	"flookybooky/pb"
	"flookybooky/services/graphql/gql_generated"
	"flookybooky/services/graphql/model"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/copier"
	"google.golang.org/protobuf/types/known/emptypb"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*model.User, error) {
	res, err := r.client.UserClient.PostUser(ctx,
		&pb.PostUserRequest{
			Username: input.Username,
			Password: input.Password,
			Role:     input.Role,
		},
	)
	if err != nil {
		return nil, err
	}
	var user model.User
	copier.Copy(&user, res.GetUser())
	return &user, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.LoginInfo, error) {
	res, err := r.client.UserClient.Login(ctx,
		&pb.LoginRequest{
			User: &pb.User{
				Username: input.Username,
				Password: input.Password,
			},
		},
	)

	if err != nil {
		return nil, err
	}

	c, _ := ctx.Value(util.ContextKey{}).(*gin.Context)
	c.SetCookie(
		"Authentication", res.JwtToken,
		3600*24, "", "", false, false,
	)
	return &model.LoginInfo{
		TokenString: res.JwtToken,
	}, nil
}

// CreateCustomer is the resolver for the createCustomer field.
func (r *mutationResolver) CreateCustomer(ctx context.Context, input model.CustomerInput) (*bool, error) {
	_, err := r.client.CustomerClient.PostCustomer(ctx,
		&pb.Customer{
			Status:      input.Status,
			Name:        input.Name,
			Address:     input.Address,
			LicenseId:   input.LicenseID,
			PhoneNumber: input.PhoneNumber,
			Timestamp:   input.Timestamp,
		},
	)
	if err != nil {
		return nil, err
	}
	return nil, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	res, err := r.client.UserClient.GetUsers(ctx, &pb.GetUsersRequest{})
	if err != nil {
		return nil, err
	}
	var users []*model.User
	copier.Copy(&users, &res.Users)
	return users, nil
}

// Customers is the resolver for the customers field.
func (r *queryResolver) Customers(ctx context.Context) ([]*model.Customer, error) {
	res, err := r.client.CustomerClient.GetCustomers(ctx, &emptypb.Empty{})
	if err != nil {
		return nil, err
	}
	var customers []*model.Customer
	copier.Copy(&customers, &res.Customers)
	return customers, nil
}

// Mutation returns gql_generated.MutationResolver implementation.
func (r *Resolver) Mutation() gql_generated.MutationResolver { return &mutationResolver{r} }

// Query returns gql_generated.QueryResolver implementation.
func (r *Resolver) Query() gql_generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
