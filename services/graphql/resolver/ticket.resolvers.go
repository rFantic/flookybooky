package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"flookybooky/pb"
	"flookybooky/services/graphql/gql_generated"
	"flookybooky/services/graphql/internal"
	"flookybooky/services/graphql/model"
)

// Ticket is the resolver for the ticket field.
func (r *queryResolver) Ticket(ctx context.Context, input *model.Pagination) ([]*model.Ticket, error) {
	ticketsRes, err := r.client.BookingClient.GetTickets(ctx,
		internal.ParsePaginationGraphqlToPb(input))
	return internal.ParseTicketsPbToGraphqlTo(ticketsRes), err
}

// GoingFlight is the resolver for the going_flight field.
func (r *ticketResolver) GoingFlight(ctx context.Context, obj *model.Ticket) (*model.Flight, error) {
	if obj.GoingFlight != nil {
		flightRes, err := r.client.FlightClient.GetFlight(ctx,
			&pb.UUID{Id: obj.GoingFlight.ID})
		return internal.ParseFlightPbToGraphql(flightRes), err
	}
	return nil, nil
}

// ReturnFlight is the resolver for the return_flight field.
func (r *ticketResolver) ReturnFlight(ctx context.Context, obj *model.Ticket) (*model.Flight, error) {
	if obj.ReturnFlight != nil {
		flightRes, err := r.client.FlightClient.GetFlight(ctx,
			&pb.UUID{Id: obj.ReturnFlight.ID})
		return internal.ParseFlightPbToGraphql(flightRes), err
	}
	return nil, nil
}

// Ticket returns gql_generated.TicketResolver implementation.
func (r *Resolver) Ticket() gql_generated.TicketResolver { return &ticketResolver{r} }

type ticketResolver struct{ *Resolver }
