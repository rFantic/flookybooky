// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flookybooky/services/booking/ent/booking"
	"flookybooky/services/booking/ent/predicate"
	"flookybooky/services/booking/ent/ticket"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TicketUpdate is the builder for updating Ticket entities.
type TicketUpdate struct {
	config
	hooks    []Hook
	mutation *TicketMutation
}

// Where appends a list predicates to the TicketUpdate builder.
func (tu *TicketUpdate) Where(ps ...predicate.Ticket) *TicketUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetFlightID sets the "flight_id" field.
func (tu *TicketUpdate) SetFlightID(u uuid.UUID) *TicketUpdate {
	tu.mutation.SetFlightID(u)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TicketUpdate) SetStatus(t ticket.Status) *TicketUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetPassengerName sets the "passenger_name" field.
func (tu *TicketUpdate) SetPassengerName(s string) *TicketUpdate {
	tu.mutation.SetPassengerName(s)
	return tu
}

// SetPassengerLicenseID sets the "passenger_license_id" field.
func (tu *TicketUpdate) SetPassengerLicenseID(s string) *TicketUpdate {
	tu.mutation.SetPassengerLicenseID(s)
	return tu
}

// SetPassengerEmail sets the "passenger_email" field.
func (tu *TicketUpdate) SetPassengerEmail(s string) *TicketUpdate {
	tu.mutation.SetPassengerEmail(s)
	return tu
}

// SetSeatNumber sets the "seat_number" field.
func (tu *TicketUpdate) SetSeatNumber(s string) *TicketUpdate {
	tu.mutation.SetSeatNumber(s)
	return tu
}

// SetClass sets the "class" field.
func (tu *TicketUpdate) SetClass(t ticket.Class) *TicketUpdate {
	tu.mutation.SetClass(t)
	return tu
}

// AddGoingIDs adds the "going" edge to the Booking entity by IDs.
func (tu *TicketUpdate) AddGoingIDs(ids ...uuid.UUID) *TicketUpdate {
	tu.mutation.AddGoingIDs(ids...)
	return tu
}

// AddGoing adds the "going" edges to the Booking entity.
func (tu *TicketUpdate) AddGoing(b ...*Booking) *TicketUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tu.AddGoingIDs(ids...)
}

// AddReturnIDs adds the "return" edge to the Booking entity by IDs.
func (tu *TicketUpdate) AddReturnIDs(ids ...uuid.UUID) *TicketUpdate {
	tu.mutation.AddReturnIDs(ids...)
	return tu
}

// AddReturn adds the "return" edges to the Booking entity.
func (tu *TicketUpdate) AddReturn(b ...*Booking) *TicketUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tu.AddReturnIDs(ids...)
}

// Mutation returns the TicketMutation object of the builder.
func (tu *TicketUpdate) Mutation() *TicketMutation {
	return tu.mutation
}

// ClearGoing clears all "going" edges to the Booking entity.
func (tu *TicketUpdate) ClearGoing() *TicketUpdate {
	tu.mutation.ClearGoing()
	return tu
}

// RemoveGoingIDs removes the "going" edge to Booking entities by IDs.
func (tu *TicketUpdate) RemoveGoingIDs(ids ...uuid.UUID) *TicketUpdate {
	tu.mutation.RemoveGoingIDs(ids...)
	return tu
}

// RemoveGoing removes "going" edges to Booking entities.
func (tu *TicketUpdate) RemoveGoing(b ...*Booking) *TicketUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tu.RemoveGoingIDs(ids...)
}

// ClearReturn clears all "return" edges to the Booking entity.
func (tu *TicketUpdate) ClearReturn() *TicketUpdate {
	tu.mutation.ClearReturn()
	return tu
}

// RemoveReturnIDs removes the "return" edge to Booking entities by IDs.
func (tu *TicketUpdate) RemoveReturnIDs(ids ...uuid.UUID) *TicketUpdate {
	tu.mutation.RemoveReturnIDs(ids...)
	return tu
}

// RemoveReturn removes "return" edges to Booking entities.
func (tu *TicketUpdate) RemoveReturn(b ...*Booking) *TicketUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tu.RemoveReturnIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TicketUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TicketMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TicketUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TicketUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TicketUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TicketUpdate) check() error {
	if v, ok := tu.mutation.Status(); ok {
		if err := ticket.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Ticket.status": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Class(); ok {
		if err := ticket.ClassValidator(v); err != nil {
			return &ValidationError{Name: "class", err: fmt.Errorf(`ent: validator failed for field "Ticket.class": %w`, err)}
		}
	}
	return nil
}

func (tu *TicketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ticket.Table, ticket.Columns, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.FlightID(); ok {
		_spec.SetField(ticket.FieldFlightID, field.TypeUUID, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(ticket.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.PassengerName(); ok {
		_spec.SetField(ticket.FieldPassengerName, field.TypeString, value)
	}
	if value, ok := tu.mutation.PassengerLicenseID(); ok {
		_spec.SetField(ticket.FieldPassengerLicenseID, field.TypeString, value)
	}
	if value, ok := tu.mutation.PassengerEmail(); ok {
		_spec.SetField(ticket.FieldPassengerEmail, field.TypeString, value)
	}
	if value, ok := tu.mutation.SeatNumber(); ok {
		_spec.SetField(ticket.FieldSeatNumber, field.TypeString, value)
	}
	if value, ok := tu.mutation.Class(); ok {
		_spec.SetField(ticket.FieldClass, field.TypeEnum, value)
	}
	if tu.mutation.GoingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.GoingTable,
			Columns: []string{ticket.GoingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedGoingIDs(); len(nodes) > 0 && !tu.mutation.GoingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.GoingTable,
			Columns: []string{ticket.GoingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.GoingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.GoingTable,
			Columns: []string{ticket.GoingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ReturnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.ReturnTable,
			Columns: []string{ticket.ReturnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedReturnIDs(); len(nodes) > 0 && !tu.mutation.ReturnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.ReturnTable,
			Columns: []string{ticket.ReturnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ReturnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.ReturnTable,
			Columns: []string{ticket.ReturnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TicketUpdateOne is the builder for updating a single Ticket entity.
type TicketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TicketMutation
}

// SetFlightID sets the "flight_id" field.
func (tuo *TicketUpdateOne) SetFlightID(u uuid.UUID) *TicketUpdateOne {
	tuo.mutation.SetFlightID(u)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TicketUpdateOne) SetStatus(t ticket.Status) *TicketUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetPassengerName sets the "passenger_name" field.
func (tuo *TicketUpdateOne) SetPassengerName(s string) *TicketUpdateOne {
	tuo.mutation.SetPassengerName(s)
	return tuo
}

// SetPassengerLicenseID sets the "passenger_license_id" field.
func (tuo *TicketUpdateOne) SetPassengerLicenseID(s string) *TicketUpdateOne {
	tuo.mutation.SetPassengerLicenseID(s)
	return tuo
}

// SetPassengerEmail sets the "passenger_email" field.
func (tuo *TicketUpdateOne) SetPassengerEmail(s string) *TicketUpdateOne {
	tuo.mutation.SetPassengerEmail(s)
	return tuo
}

// SetSeatNumber sets the "seat_number" field.
func (tuo *TicketUpdateOne) SetSeatNumber(s string) *TicketUpdateOne {
	tuo.mutation.SetSeatNumber(s)
	return tuo
}

// SetClass sets the "class" field.
func (tuo *TicketUpdateOne) SetClass(t ticket.Class) *TicketUpdateOne {
	tuo.mutation.SetClass(t)
	return tuo
}

// AddGoingIDs adds the "going" edge to the Booking entity by IDs.
func (tuo *TicketUpdateOne) AddGoingIDs(ids ...uuid.UUID) *TicketUpdateOne {
	tuo.mutation.AddGoingIDs(ids...)
	return tuo
}

// AddGoing adds the "going" edges to the Booking entity.
func (tuo *TicketUpdateOne) AddGoing(b ...*Booking) *TicketUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tuo.AddGoingIDs(ids...)
}

// AddReturnIDs adds the "return" edge to the Booking entity by IDs.
func (tuo *TicketUpdateOne) AddReturnIDs(ids ...uuid.UUID) *TicketUpdateOne {
	tuo.mutation.AddReturnIDs(ids...)
	return tuo
}

// AddReturn adds the "return" edges to the Booking entity.
func (tuo *TicketUpdateOne) AddReturn(b ...*Booking) *TicketUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tuo.AddReturnIDs(ids...)
}

// Mutation returns the TicketMutation object of the builder.
func (tuo *TicketUpdateOne) Mutation() *TicketMutation {
	return tuo.mutation
}

// ClearGoing clears all "going" edges to the Booking entity.
func (tuo *TicketUpdateOne) ClearGoing() *TicketUpdateOne {
	tuo.mutation.ClearGoing()
	return tuo
}

// RemoveGoingIDs removes the "going" edge to Booking entities by IDs.
func (tuo *TicketUpdateOne) RemoveGoingIDs(ids ...uuid.UUID) *TicketUpdateOne {
	tuo.mutation.RemoveGoingIDs(ids...)
	return tuo
}

// RemoveGoing removes "going" edges to Booking entities.
func (tuo *TicketUpdateOne) RemoveGoing(b ...*Booking) *TicketUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tuo.RemoveGoingIDs(ids...)
}

// ClearReturn clears all "return" edges to the Booking entity.
func (tuo *TicketUpdateOne) ClearReturn() *TicketUpdateOne {
	tuo.mutation.ClearReturn()
	return tuo
}

// RemoveReturnIDs removes the "return" edge to Booking entities by IDs.
func (tuo *TicketUpdateOne) RemoveReturnIDs(ids ...uuid.UUID) *TicketUpdateOne {
	tuo.mutation.RemoveReturnIDs(ids...)
	return tuo
}

// RemoveReturn removes "return" edges to Booking entities.
func (tuo *TicketUpdateOne) RemoveReturn(b ...*Booking) *TicketUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tuo.RemoveReturnIDs(ids...)
}

// Where appends a list predicates to the TicketUpdate builder.
func (tuo *TicketUpdateOne) Where(ps ...predicate.Ticket) *TicketUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TicketUpdateOne) Select(field string, fields ...string) *TicketUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Ticket entity.
func (tuo *TicketUpdateOne) Save(ctx context.Context) (*Ticket, error) {
	return withHooks[*Ticket, TicketMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TicketUpdateOne) SaveX(ctx context.Context) *Ticket {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TicketUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TicketUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TicketUpdateOne) check() error {
	if v, ok := tuo.mutation.Status(); ok {
		if err := ticket.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Ticket.status": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Class(); ok {
		if err := ticket.ClassValidator(v); err != nil {
			return &ValidationError{Name: "class", err: fmt.Errorf(`ent: validator failed for field "Ticket.class": %w`, err)}
		}
	}
	return nil
}

func (tuo *TicketUpdateOne) sqlSave(ctx context.Context) (_node *Ticket, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ticket.Table, ticket.Columns, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ticket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ticket.FieldID)
		for _, f := range fields {
			if !ticket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ticket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.FlightID(); ok {
		_spec.SetField(ticket.FieldFlightID, field.TypeUUID, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(ticket.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.PassengerName(); ok {
		_spec.SetField(ticket.FieldPassengerName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PassengerLicenseID(); ok {
		_spec.SetField(ticket.FieldPassengerLicenseID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PassengerEmail(); ok {
		_spec.SetField(ticket.FieldPassengerEmail, field.TypeString, value)
	}
	if value, ok := tuo.mutation.SeatNumber(); ok {
		_spec.SetField(ticket.FieldSeatNumber, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Class(); ok {
		_spec.SetField(ticket.FieldClass, field.TypeEnum, value)
	}
	if tuo.mutation.GoingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.GoingTable,
			Columns: []string{ticket.GoingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedGoingIDs(); len(nodes) > 0 && !tuo.mutation.GoingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.GoingTable,
			Columns: []string{ticket.GoingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.GoingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.GoingTable,
			Columns: []string{ticket.GoingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ReturnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.ReturnTable,
			Columns: []string{ticket.ReturnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedReturnIDs(); len(nodes) > 0 && !tuo.mutation.ReturnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.ReturnTable,
			Columns: []string{ticket.ReturnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ReturnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.ReturnTable,
			Columns: []string{ticket.ReturnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ticket{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
