// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flookybooky/services/booking/ent/booking"
	"flookybooky/services/booking/ent/predicate"
	"flookybooky/services/booking/ent/ticket"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBooking = "Booking"
	TypeTicket  = "Ticket"
)

// BookingMutation represents an operation that mutates the Booking nodes in the graph.
type BookingMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	customer_id   *uuid.UUID
	status        *booking.Status
	created_at    *time.Time
	clearedFields map[string]struct{}
	ticket        map[uuid.UUID]struct{}
	removedticket map[uuid.UUID]struct{}
	clearedticket bool
	done          bool
	oldValue      func(context.Context) (*Booking, error)
	predicates    []predicate.Booking
}

var _ ent.Mutation = (*BookingMutation)(nil)

// bookingOption allows management of the mutation configuration using functional options.
type bookingOption func(*BookingMutation)

// newBookingMutation creates new mutation for the Booking entity.
func newBookingMutation(c config, op Op, opts ...bookingOption) *BookingMutation {
	m := &BookingMutation{
		config:        c,
		op:            op,
		typ:           TypeBooking,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBookingID sets the ID field of the mutation.
func withBookingID(id uuid.UUID) bookingOption {
	return func(m *BookingMutation) {
		var (
			err   error
			once  sync.Once
			value *Booking
		)
		m.oldValue = func(ctx context.Context) (*Booking, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Booking.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBooking sets the old Booking of the mutation.
func withBooking(node *Booking) bookingOption {
	return func(m *BookingMutation) {
		m.oldValue = func(context.Context) (*Booking, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BookingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BookingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Booking entities.
func (m *BookingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BookingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BookingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Booking.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCustomerID sets the "customer_id" field.
func (m *BookingMutation) SetCustomerID(u uuid.UUID) {
	m.customer_id = &u
}

// CustomerID returns the value of the "customer_id" field in the mutation.
func (m *BookingMutation) CustomerID() (r uuid.UUID, exists bool) {
	v := m.customer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerID returns the old "customer_id" field's value of the Booking entity.
// If the Booking object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingMutation) OldCustomerID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerID: %w", err)
	}
	return oldValue.CustomerID, nil
}

// ResetCustomerID resets all changes to the "customer_id" field.
func (m *BookingMutation) ResetCustomerID() {
	m.customer_id = nil
}

// SetStatus sets the "status" field.
func (m *BookingMutation) SetStatus(b booking.Status) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *BookingMutation) Status() (r booking.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Booking entity.
// If the Booking object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingMutation) OldStatus(ctx context.Context) (v booking.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *BookingMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *BookingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BookingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Booking entity.
// If the Booking object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BookingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddTicketIDs adds the "ticket" edge to the Ticket entity by ids.
func (m *BookingMutation) AddTicketIDs(ids ...uuid.UUID) {
	if m.ticket == nil {
		m.ticket = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.ticket[ids[i]] = struct{}{}
	}
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (m *BookingMutation) ClearTicket() {
	m.clearedticket = true
}

// TicketCleared reports if the "ticket" edge to the Ticket entity was cleared.
func (m *BookingMutation) TicketCleared() bool {
	return m.clearedticket
}

// RemoveTicketIDs removes the "ticket" edge to the Ticket entity by IDs.
func (m *BookingMutation) RemoveTicketIDs(ids ...uuid.UUID) {
	if m.removedticket == nil {
		m.removedticket = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.ticket, ids[i])
		m.removedticket[ids[i]] = struct{}{}
	}
}

// RemovedTicket returns the removed IDs of the "ticket" edge to the Ticket entity.
func (m *BookingMutation) RemovedTicketIDs() (ids []uuid.UUID) {
	for id := range m.removedticket {
		ids = append(ids, id)
	}
	return
}

// TicketIDs returns the "ticket" edge IDs in the mutation.
func (m *BookingMutation) TicketIDs() (ids []uuid.UUID) {
	for id := range m.ticket {
		ids = append(ids, id)
	}
	return
}

// ResetTicket resets all changes to the "ticket" edge.
func (m *BookingMutation) ResetTicket() {
	m.ticket = nil
	m.clearedticket = false
	m.removedticket = nil
}

// Where appends a list predicates to the BookingMutation builder.
func (m *BookingMutation) Where(ps ...predicate.Booking) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BookingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BookingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Booking, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BookingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BookingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Booking).
func (m *BookingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BookingMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.customer_id != nil {
		fields = append(fields, booking.FieldCustomerID)
	}
	if m.status != nil {
		fields = append(fields, booking.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, booking.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BookingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case booking.FieldCustomerID:
		return m.CustomerID()
	case booking.FieldStatus:
		return m.Status()
	case booking.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BookingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case booking.FieldCustomerID:
		return m.OldCustomerID(ctx)
	case booking.FieldStatus:
		return m.OldStatus(ctx)
	case booking.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Booking field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BookingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case booking.FieldCustomerID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerID(v)
		return nil
	case booking.FieldStatus:
		v, ok := value.(booking.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case booking.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Booking field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BookingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BookingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BookingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Booking numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BookingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BookingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BookingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Booking nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BookingMutation) ResetField(name string) error {
	switch name {
	case booking.FieldCustomerID:
		m.ResetCustomerID()
		return nil
	case booking.FieldStatus:
		m.ResetStatus()
		return nil
	case booking.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Booking field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BookingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.ticket != nil {
		edges = append(edges, booking.EdgeTicket)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BookingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case booking.EdgeTicket:
		ids := make([]ent.Value, 0, len(m.ticket))
		for id := range m.ticket {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BookingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedticket != nil {
		edges = append(edges, booking.EdgeTicket)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BookingMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case booking.EdgeTicket:
		ids := make([]ent.Value, 0, len(m.removedticket))
		for id := range m.removedticket {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BookingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedticket {
		edges = append(edges, booking.EdgeTicket)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BookingMutation) EdgeCleared(name string) bool {
	switch name {
	case booking.EdgeTicket:
		return m.clearedticket
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BookingMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Booking unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BookingMutation) ResetEdge(name string) error {
	switch name {
	case booking.EdgeTicket:
		m.ResetTicket()
		return nil
	}
	return fmt.Errorf("unknown Booking edge %s", name)
}

// TicketMutation represents an operation that mutates the Ticket nodes in the graph.
type TicketMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	going_flight_id      *uuid.UUID
	return_flight_id     *uuid.UUID
	status               *ticket.Status
	passenger_name       *string
	passenger_license_id *string
	passenger_email      *string
	seat_number          *string
	class                *ticket.Class
	clearedFields        map[string]struct{}
	booking              *uuid.UUID
	clearedbooking       bool
	done                 bool
	oldValue             func(context.Context) (*Ticket, error)
	predicates           []predicate.Ticket
}

var _ ent.Mutation = (*TicketMutation)(nil)

// ticketOption allows management of the mutation configuration using functional options.
type ticketOption func(*TicketMutation)

// newTicketMutation creates new mutation for the Ticket entity.
func newTicketMutation(c config, op Op, opts ...ticketOption) *TicketMutation {
	m := &TicketMutation{
		config:        c,
		op:            op,
		typ:           TypeTicket,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTicketID sets the ID field of the mutation.
func withTicketID(id uuid.UUID) ticketOption {
	return func(m *TicketMutation) {
		var (
			err   error
			once  sync.Once
			value *Ticket
		)
		m.oldValue = func(ctx context.Context) (*Ticket, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Ticket.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTicket sets the old Ticket of the mutation.
func withTicket(node *Ticket) ticketOption {
	return func(m *TicketMutation) {
		m.oldValue = func(context.Context) (*Ticket, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TicketMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TicketMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Ticket entities.
func (m *TicketMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TicketMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TicketMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Ticket.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBookingID sets the "booking_id" field.
func (m *TicketMutation) SetBookingID(u uuid.UUID) {
	m.booking = &u
}

// BookingID returns the value of the "booking_id" field in the mutation.
func (m *TicketMutation) BookingID() (r uuid.UUID, exists bool) {
	v := m.booking
	if v == nil {
		return
	}
	return *v, true
}

// OldBookingID returns the old "booking_id" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldBookingID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBookingID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBookingID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBookingID: %w", err)
	}
	return oldValue.BookingID, nil
}

// ResetBookingID resets all changes to the "booking_id" field.
func (m *TicketMutation) ResetBookingID() {
	m.booking = nil
}

// SetGoingFlightID sets the "going_flight_id" field.
func (m *TicketMutation) SetGoingFlightID(u uuid.UUID) {
	m.going_flight_id = &u
}

// GoingFlightID returns the value of the "going_flight_id" field in the mutation.
func (m *TicketMutation) GoingFlightID() (r uuid.UUID, exists bool) {
	v := m.going_flight_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoingFlightID returns the old "going_flight_id" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldGoingFlightID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoingFlightID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoingFlightID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoingFlightID: %w", err)
	}
	return oldValue.GoingFlightID, nil
}

// ResetGoingFlightID resets all changes to the "going_flight_id" field.
func (m *TicketMutation) ResetGoingFlightID() {
	m.going_flight_id = nil
}

// SetReturnFlightID sets the "return_flight_id" field.
func (m *TicketMutation) SetReturnFlightID(u uuid.UUID) {
	m.return_flight_id = &u
}

// ReturnFlightID returns the value of the "return_flight_id" field in the mutation.
func (m *TicketMutation) ReturnFlightID() (r uuid.UUID, exists bool) {
	v := m.return_flight_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReturnFlightID returns the old "return_flight_id" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldReturnFlightID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReturnFlightID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReturnFlightID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReturnFlightID: %w", err)
	}
	return oldValue.ReturnFlightID, nil
}

// ClearReturnFlightID clears the value of the "return_flight_id" field.
func (m *TicketMutation) ClearReturnFlightID() {
	m.return_flight_id = nil
	m.clearedFields[ticket.FieldReturnFlightID] = struct{}{}
}

// ReturnFlightIDCleared returns if the "return_flight_id" field was cleared in this mutation.
func (m *TicketMutation) ReturnFlightIDCleared() bool {
	_, ok := m.clearedFields[ticket.FieldReturnFlightID]
	return ok
}

// ResetReturnFlightID resets all changes to the "return_flight_id" field.
func (m *TicketMutation) ResetReturnFlightID() {
	m.return_flight_id = nil
	delete(m.clearedFields, ticket.FieldReturnFlightID)
}

// SetStatus sets the "status" field.
func (m *TicketMutation) SetStatus(t ticket.Status) {
	m.status = &t
}

// Status returns the value of the "status" field in the mutation.
func (m *TicketMutation) Status() (r ticket.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldStatus(ctx context.Context) (v ticket.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TicketMutation) ResetStatus() {
	m.status = nil
}

// SetPassengerName sets the "passenger_name" field.
func (m *TicketMutation) SetPassengerName(s string) {
	m.passenger_name = &s
}

// PassengerName returns the value of the "passenger_name" field in the mutation.
func (m *TicketMutation) PassengerName() (r string, exists bool) {
	v := m.passenger_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPassengerName returns the old "passenger_name" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldPassengerName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassengerName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassengerName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassengerName: %w", err)
	}
	return oldValue.PassengerName, nil
}

// ResetPassengerName resets all changes to the "passenger_name" field.
func (m *TicketMutation) ResetPassengerName() {
	m.passenger_name = nil
}

// SetPassengerLicenseID sets the "passenger_license_id" field.
func (m *TicketMutation) SetPassengerLicenseID(s string) {
	m.passenger_license_id = &s
}

// PassengerLicenseID returns the value of the "passenger_license_id" field in the mutation.
func (m *TicketMutation) PassengerLicenseID() (r string, exists bool) {
	v := m.passenger_license_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPassengerLicenseID returns the old "passenger_license_id" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldPassengerLicenseID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassengerLicenseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassengerLicenseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassengerLicenseID: %w", err)
	}
	return oldValue.PassengerLicenseID, nil
}

// ResetPassengerLicenseID resets all changes to the "passenger_license_id" field.
func (m *TicketMutation) ResetPassengerLicenseID() {
	m.passenger_license_id = nil
}

// SetPassengerEmail sets the "passenger_email" field.
func (m *TicketMutation) SetPassengerEmail(s string) {
	m.passenger_email = &s
}

// PassengerEmail returns the value of the "passenger_email" field in the mutation.
func (m *TicketMutation) PassengerEmail() (r string, exists bool) {
	v := m.passenger_email
	if v == nil {
		return
	}
	return *v, true
}

// OldPassengerEmail returns the old "passenger_email" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldPassengerEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassengerEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassengerEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassengerEmail: %w", err)
	}
	return oldValue.PassengerEmail, nil
}

// ResetPassengerEmail resets all changes to the "passenger_email" field.
func (m *TicketMutation) ResetPassengerEmail() {
	m.passenger_email = nil
}

// SetSeatNumber sets the "seat_number" field.
func (m *TicketMutation) SetSeatNumber(s string) {
	m.seat_number = &s
}

// SeatNumber returns the value of the "seat_number" field in the mutation.
func (m *TicketMutation) SeatNumber() (r string, exists bool) {
	v := m.seat_number
	if v == nil {
		return
	}
	return *v, true
}

// OldSeatNumber returns the old "seat_number" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldSeatNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSeatNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSeatNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeatNumber: %w", err)
	}
	return oldValue.SeatNumber, nil
}

// ResetSeatNumber resets all changes to the "seat_number" field.
func (m *TicketMutation) ResetSeatNumber() {
	m.seat_number = nil
}

// SetClass sets the "class" field.
func (m *TicketMutation) SetClass(t ticket.Class) {
	m.class = &t
}

// Class returns the value of the "class" field in the mutation.
func (m *TicketMutation) Class() (r ticket.Class, exists bool) {
	v := m.class
	if v == nil {
		return
	}
	return *v, true
}

// OldClass returns the old "class" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldClass(ctx context.Context) (v ticket.Class, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClass is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClass requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClass: %w", err)
	}
	return oldValue.Class, nil
}

// ResetClass resets all changes to the "class" field.
func (m *TicketMutation) ResetClass() {
	m.class = nil
}

// ClearBooking clears the "booking" edge to the Booking entity.
func (m *TicketMutation) ClearBooking() {
	m.clearedbooking = true
}

// BookingCleared reports if the "booking" edge to the Booking entity was cleared.
func (m *TicketMutation) BookingCleared() bool {
	return m.clearedbooking
}

// BookingIDs returns the "booking" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BookingID instead. It exists only for internal usage by the builders.
func (m *TicketMutation) BookingIDs() (ids []uuid.UUID) {
	if id := m.booking; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBooking resets all changes to the "booking" edge.
func (m *TicketMutation) ResetBooking() {
	m.booking = nil
	m.clearedbooking = false
}

// Where appends a list predicates to the TicketMutation builder.
func (m *TicketMutation) Where(ps ...predicate.Ticket) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TicketMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TicketMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Ticket, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TicketMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TicketMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Ticket).
func (m *TicketMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TicketMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.booking != nil {
		fields = append(fields, ticket.FieldBookingID)
	}
	if m.going_flight_id != nil {
		fields = append(fields, ticket.FieldGoingFlightID)
	}
	if m.return_flight_id != nil {
		fields = append(fields, ticket.FieldReturnFlightID)
	}
	if m.status != nil {
		fields = append(fields, ticket.FieldStatus)
	}
	if m.passenger_name != nil {
		fields = append(fields, ticket.FieldPassengerName)
	}
	if m.passenger_license_id != nil {
		fields = append(fields, ticket.FieldPassengerLicenseID)
	}
	if m.passenger_email != nil {
		fields = append(fields, ticket.FieldPassengerEmail)
	}
	if m.seat_number != nil {
		fields = append(fields, ticket.FieldSeatNumber)
	}
	if m.class != nil {
		fields = append(fields, ticket.FieldClass)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TicketMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ticket.FieldBookingID:
		return m.BookingID()
	case ticket.FieldGoingFlightID:
		return m.GoingFlightID()
	case ticket.FieldReturnFlightID:
		return m.ReturnFlightID()
	case ticket.FieldStatus:
		return m.Status()
	case ticket.FieldPassengerName:
		return m.PassengerName()
	case ticket.FieldPassengerLicenseID:
		return m.PassengerLicenseID()
	case ticket.FieldPassengerEmail:
		return m.PassengerEmail()
	case ticket.FieldSeatNumber:
		return m.SeatNumber()
	case ticket.FieldClass:
		return m.Class()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TicketMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ticket.FieldBookingID:
		return m.OldBookingID(ctx)
	case ticket.FieldGoingFlightID:
		return m.OldGoingFlightID(ctx)
	case ticket.FieldReturnFlightID:
		return m.OldReturnFlightID(ctx)
	case ticket.FieldStatus:
		return m.OldStatus(ctx)
	case ticket.FieldPassengerName:
		return m.OldPassengerName(ctx)
	case ticket.FieldPassengerLicenseID:
		return m.OldPassengerLicenseID(ctx)
	case ticket.FieldPassengerEmail:
		return m.OldPassengerEmail(ctx)
	case ticket.FieldSeatNumber:
		return m.OldSeatNumber(ctx)
	case ticket.FieldClass:
		return m.OldClass(ctx)
	}
	return nil, fmt.Errorf("unknown Ticket field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ticket.FieldBookingID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBookingID(v)
		return nil
	case ticket.FieldGoingFlightID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoingFlightID(v)
		return nil
	case ticket.FieldReturnFlightID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReturnFlightID(v)
		return nil
	case ticket.FieldStatus:
		v, ok := value.(ticket.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case ticket.FieldPassengerName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassengerName(v)
		return nil
	case ticket.FieldPassengerLicenseID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassengerLicenseID(v)
		return nil
	case ticket.FieldPassengerEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassengerEmail(v)
		return nil
	case ticket.FieldSeatNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeatNumber(v)
		return nil
	case ticket.FieldClass:
		v, ok := value.(ticket.Class)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClass(v)
		return nil
	}
	return fmt.Errorf("unknown Ticket field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TicketMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TicketMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Ticket numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TicketMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(ticket.FieldReturnFlightID) {
		fields = append(fields, ticket.FieldReturnFlightID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TicketMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TicketMutation) ClearField(name string) error {
	switch name {
	case ticket.FieldReturnFlightID:
		m.ClearReturnFlightID()
		return nil
	}
	return fmt.Errorf("unknown Ticket nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TicketMutation) ResetField(name string) error {
	switch name {
	case ticket.FieldBookingID:
		m.ResetBookingID()
		return nil
	case ticket.FieldGoingFlightID:
		m.ResetGoingFlightID()
		return nil
	case ticket.FieldReturnFlightID:
		m.ResetReturnFlightID()
		return nil
	case ticket.FieldStatus:
		m.ResetStatus()
		return nil
	case ticket.FieldPassengerName:
		m.ResetPassengerName()
		return nil
	case ticket.FieldPassengerLicenseID:
		m.ResetPassengerLicenseID()
		return nil
	case ticket.FieldPassengerEmail:
		m.ResetPassengerEmail()
		return nil
	case ticket.FieldSeatNumber:
		m.ResetSeatNumber()
		return nil
	case ticket.FieldClass:
		m.ResetClass()
		return nil
	}
	return fmt.Errorf("unknown Ticket field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TicketMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.booking != nil {
		edges = append(edges, ticket.EdgeBooking)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TicketMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ticket.EdgeBooking:
		if id := m.booking; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TicketMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TicketMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TicketMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedbooking {
		edges = append(edges, ticket.EdgeBooking)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TicketMutation) EdgeCleared(name string) bool {
	switch name {
	case ticket.EdgeBooking:
		return m.clearedbooking
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TicketMutation) ClearEdge(name string) error {
	switch name {
	case ticket.EdgeBooking:
		m.ClearBooking()
		return nil
	}
	return fmt.Errorf("unknown Ticket unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TicketMutation) ResetEdge(name string) error {
	switch name {
	case ticket.EdgeBooking:
		m.ResetBooking()
		return nil
	}
	return fmt.Errorf("unknown Ticket edge %s", name)
}
