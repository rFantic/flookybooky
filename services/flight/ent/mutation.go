// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flookybooky/services/flight/ent/airport"
	"flookybooky/services/flight/ent/flight"
	"flookybooky/services/flight/ent/predicate"
	"flookybooky/services/flight/ent/seat"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAirport = "Airport"
	TypeFlight  = "Flight"
	TypeSeat    = "Seat"
)

// AirportMutation represents an operation that mutates the Airport nodes in the graph.
type AirportMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	name               *string
	address            *string
	clearedFields      map[string]struct{}
	origin             map[uuid.UUID]struct{}
	removedorigin      map[uuid.UUID]struct{}
	clearedorigin      bool
	destination        map[uuid.UUID]struct{}
	removeddestination map[uuid.UUID]struct{}
	cleareddestination bool
	done               bool
	oldValue           func(context.Context) (*Airport, error)
	predicates         []predicate.Airport
}

var _ ent.Mutation = (*AirportMutation)(nil)

// airportOption allows management of the mutation configuration using functional options.
type airportOption func(*AirportMutation)

// newAirportMutation creates new mutation for the Airport entity.
func newAirportMutation(c config, op Op, opts ...airportOption) *AirportMutation {
	m := &AirportMutation{
		config:        c,
		op:            op,
		typ:           TypeAirport,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAirportID sets the ID field of the mutation.
func withAirportID(id uuid.UUID) airportOption {
	return func(m *AirportMutation) {
		var (
			err   error
			once  sync.Once
			value *Airport
		)
		m.oldValue = func(ctx context.Context) (*Airport, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Airport.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAirport sets the old Airport of the mutation.
func withAirport(node *Airport) airportOption {
	return func(m *AirportMutation) {
		m.oldValue = func(context.Context) (*Airport, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AirportMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AirportMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Airport entities.
func (m *AirportMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AirportMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AirportMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Airport.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AirportMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AirportMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Airport entity.
// If the Airport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AirportMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AirportMutation) ResetName() {
	m.name = nil
}

// SetAddress sets the "address" field.
func (m *AirportMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *AirportMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Airport entity.
// If the Airport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AirportMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *AirportMutation) ResetAddress() {
	m.address = nil
}

// AddOriginIDs adds the "origin" edge to the Flight entity by ids.
func (m *AirportMutation) AddOriginIDs(ids ...uuid.UUID) {
	if m.origin == nil {
		m.origin = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.origin[ids[i]] = struct{}{}
	}
}

// ClearOrigin clears the "origin" edge to the Flight entity.
func (m *AirportMutation) ClearOrigin() {
	m.clearedorigin = true
}

// OriginCleared reports if the "origin" edge to the Flight entity was cleared.
func (m *AirportMutation) OriginCleared() bool {
	return m.clearedorigin
}

// RemoveOriginIDs removes the "origin" edge to the Flight entity by IDs.
func (m *AirportMutation) RemoveOriginIDs(ids ...uuid.UUID) {
	if m.removedorigin == nil {
		m.removedorigin = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.origin, ids[i])
		m.removedorigin[ids[i]] = struct{}{}
	}
}

// RemovedOrigin returns the removed IDs of the "origin" edge to the Flight entity.
func (m *AirportMutation) RemovedOriginIDs() (ids []uuid.UUID) {
	for id := range m.removedorigin {
		ids = append(ids, id)
	}
	return
}

// OriginIDs returns the "origin" edge IDs in the mutation.
func (m *AirportMutation) OriginIDs() (ids []uuid.UUID) {
	for id := range m.origin {
		ids = append(ids, id)
	}
	return
}

// ResetOrigin resets all changes to the "origin" edge.
func (m *AirportMutation) ResetOrigin() {
	m.origin = nil
	m.clearedorigin = false
	m.removedorigin = nil
}

// AddDestinationIDs adds the "destination" edge to the Flight entity by ids.
func (m *AirportMutation) AddDestinationIDs(ids ...uuid.UUID) {
	if m.destination == nil {
		m.destination = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.destination[ids[i]] = struct{}{}
	}
}

// ClearDestination clears the "destination" edge to the Flight entity.
func (m *AirportMutation) ClearDestination() {
	m.cleareddestination = true
}

// DestinationCleared reports if the "destination" edge to the Flight entity was cleared.
func (m *AirportMutation) DestinationCleared() bool {
	return m.cleareddestination
}

// RemoveDestinationIDs removes the "destination" edge to the Flight entity by IDs.
func (m *AirportMutation) RemoveDestinationIDs(ids ...uuid.UUID) {
	if m.removeddestination == nil {
		m.removeddestination = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.destination, ids[i])
		m.removeddestination[ids[i]] = struct{}{}
	}
}

// RemovedDestination returns the removed IDs of the "destination" edge to the Flight entity.
func (m *AirportMutation) RemovedDestinationIDs() (ids []uuid.UUID) {
	for id := range m.removeddestination {
		ids = append(ids, id)
	}
	return
}

// DestinationIDs returns the "destination" edge IDs in the mutation.
func (m *AirportMutation) DestinationIDs() (ids []uuid.UUID) {
	for id := range m.destination {
		ids = append(ids, id)
	}
	return
}

// ResetDestination resets all changes to the "destination" edge.
func (m *AirportMutation) ResetDestination() {
	m.destination = nil
	m.cleareddestination = false
	m.removeddestination = nil
}

// Where appends a list predicates to the AirportMutation builder.
func (m *AirportMutation) Where(ps ...predicate.Airport) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AirportMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AirportMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Airport, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AirportMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AirportMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Airport).
func (m *AirportMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AirportMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, airport.FieldName)
	}
	if m.address != nil {
		fields = append(fields, airport.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AirportMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case airport.FieldName:
		return m.Name()
	case airport.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AirportMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case airport.FieldName:
		return m.OldName(ctx)
	case airport.FieldAddress:
		return m.OldAddress(ctx)
	}
	return nil, fmt.Errorf("unknown Airport field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AirportMutation) SetField(name string, value ent.Value) error {
	switch name {
	case airport.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case airport.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown Airport field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AirportMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AirportMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AirportMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Airport numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AirportMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AirportMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AirportMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Airport nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AirportMutation) ResetField(name string) error {
	switch name {
	case airport.FieldName:
		m.ResetName()
		return nil
	case airport.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown Airport field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AirportMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.origin != nil {
		edges = append(edges, airport.EdgeOrigin)
	}
	if m.destination != nil {
		edges = append(edges, airport.EdgeDestination)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AirportMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case airport.EdgeOrigin:
		ids := make([]ent.Value, 0, len(m.origin))
		for id := range m.origin {
			ids = append(ids, id)
		}
		return ids
	case airport.EdgeDestination:
		ids := make([]ent.Value, 0, len(m.destination))
		for id := range m.destination {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AirportMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedorigin != nil {
		edges = append(edges, airport.EdgeOrigin)
	}
	if m.removeddestination != nil {
		edges = append(edges, airport.EdgeDestination)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AirportMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case airport.EdgeOrigin:
		ids := make([]ent.Value, 0, len(m.removedorigin))
		for id := range m.removedorigin {
			ids = append(ids, id)
		}
		return ids
	case airport.EdgeDestination:
		ids := make([]ent.Value, 0, len(m.removeddestination))
		for id := range m.removeddestination {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AirportMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedorigin {
		edges = append(edges, airport.EdgeOrigin)
	}
	if m.cleareddestination {
		edges = append(edges, airport.EdgeDestination)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AirportMutation) EdgeCleared(name string) bool {
	switch name {
	case airport.EdgeOrigin:
		return m.clearedorigin
	case airport.EdgeDestination:
		return m.cleareddestination
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AirportMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Airport unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AirportMutation) ResetEdge(name string) error {
	switch name {
	case airport.EdgeOrigin:
		m.ResetOrigin()
		return nil
	case airport.EdgeDestination:
		m.ResetDestination()
		return nil
	}
	return fmt.Errorf("unknown Airport edge %s", name)
}

// FlightMutation represents an operation that mutates the Flight nodes in the graph.
type FlightMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	name               *string
	departure_time     *time.Time
	arrival_time       *time.Time
	available_slots    *int
	addavailable_slots *int
	created_at         *time.Time
	clearedFields      map[string]struct{}
	seats              map[uuid.UUID]struct{}
	removedseats       map[uuid.UUID]struct{}
	clearedseats       bool
	origin             *uuid.UUID
	clearedorigin      bool
	destination        *uuid.UUID
	cleareddestination bool
	done               bool
	oldValue           func(context.Context) (*Flight, error)
	predicates         []predicate.Flight
}

var _ ent.Mutation = (*FlightMutation)(nil)

// flightOption allows management of the mutation configuration using functional options.
type flightOption func(*FlightMutation)

// newFlightMutation creates new mutation for the Flight entity.
func newFlightMutation(c config, op Op, opts ...flightOption) *FlightMutation {
	m := &FlightMutation{
		config:        c,
		op:            op,
		typ:           TypeFlight,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFlightID sets the ID field of the mutation.
func withFlightID(id uuid.UUID) flightOption {
	return func(m *FlightMutation) {
		var (
			err   error
			once  sync.Once
			value *Flight
		)
		m.oldValue = func(ctx context.Context) (*Flight, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Flight.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFlight sets the old Flight of the mutation.
func withFlight(node *Flight) flightOption {
	return func(m *FlightMutation) {
		m.oldValue = func(context.Context) (*Flight, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FlightMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FlightMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Flight entities.
func (m *FlightMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FlightMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FlightMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Flight.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *FlightMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FlightMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Flight entity.
// If the Flight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlightMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FlightMutation) ResetName() {
	m.name = nil
}

// SetDepartureTime sets the "departure_time" field.
func (m *FlightMutation) SetDepartureTime(t time.Time) {
	m.departure_time = &t
}

// DepartureTime returns the value of the "departure_time" field in the mutation.
func (m *FlightMutation) DepartureTime() (r time.Time, exists bool) {
	v := m.departure_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartureTime returns the old "departure_time" field's value of the Flight entity.
// If the Flight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlightMutation) OldDepartureTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartureTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartureTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartureTime: %w", err)
	}
	return oldValue.DepartureTime, nil
}

// ResetDepartureTime resets all changes to the "departure_time" field.
func (m *FlightMutation) ResetDepartureTime() {
	m.departure_time = nil
}

// SetArrivalTime sets the "arrival_time" field.
func (m *FlightMutation) SetArrivalTime(t time.Time) {
	m.arrival_time = &t
}

// ArrivalTime returns the value of the "arrival_time" field in the mutation.
func (m *FlightMutation) ArrivalTime() (r time.Time, exists bool) {
	v := m.arrival_time
	if v == nil {
		return
	}
	return *v, true
}

// OldArrivalTime returns the old "arrival_time" field's value of the Flight entity.
// If the Flight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlightMutation) OldArrivalTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArrivalTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArrivalTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArrivalTime: %w", err)
	}
	return oldValue.ArrivalTime, nil
}

// ResetArrivalTime resets all changes to the "arrival_time" field.
func (m *FlightMutation) ResetArrivalTime() {
	m.arrival_time = nil
}

// SetAvailableSlots sets the "available_slots" field.
func (m *FlightMutation) SetAvailableSlots(i int) {
	m.available_slots = &i
	m.addavailable_slots = nil
}

// AvailableSlots returns the value of the "available_slots" field in the mutation.
func (m *FlightMutation) AvailableSlots() (r int, exists bool) {
	v := m.available_slots
	if v == nil {
		return
	}
	return *v, true
}

// OldAvailableSlots returns the old "available_slots" field's value of the Flight entity.
// If the Flight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlightMutation) OldAvailableSlots(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvailableSlots is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvailableSlots requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvailableSlots: %w", err)
	}
	return oldValue.AvailableSlots, nil
}

// AddAvailableSlots adds i to the "available_slots" field.
func (m *FlightMutation) AddAvailableSlots(i int) {
	if m.addavailable_slots != nil {
		*m.addavailable_slots += i
	} else {
		m.addavailable_slots = &i
	}
}

// AddedAvailableSlots returns the value that was added to the "available_slots" field in this mutation.
func (m *FlightMutation) AddedAvailableSlots() (r int, exists bool) {
	v := m.addavailable_slots
	if v == nil {
		return
	}
	return *v, true
}

// ResetAvailableSlots resets all changes to the "available_slots" field.
func (m *FlightMutation) ResetAvailableSlots() {
	m.available_slots = nil
	m.addavailable_slots = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FlightMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FlightMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Flight entity.
// If the Flight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlightMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FlightMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddSeatIDs adds the "seats" edge to the Seat entity by ids.
func (m *FlightMutation) AddSeatIDs(ids ...uuid.UUID) {
	if m.seats == nil {
		m.seats = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.seats[ids[i]] = struct{}{}
	}
}

// ClearSeats clears the "seats" edge to the Seat entity.
func (m *FlightMutation) ClearSeats() {
	m.clearedseats = true
}

// SeatsCleared reports if the "seats" edge to the Seat entity was cleared.
func (m *FlightMutation) SeatsCleared() bool {
	return m.clearedseats
}

// RemoveSeatIDs removes the "seats" edge to the Seat entity by IDs.
func (m *FlightMutation) RemoveSeatIDs(ids ...uuid.UUID) {
	if m.removedseats == nil {
		m.removedseats = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.seats, ids[i])
		m.removedseats[ids[i]] = struct{}{}
	}
}

// RemovedSeats returns the removed IDs of the "seats" edge to the Seat entity.
func (m *FlightMutation) RemovedSeatsIDs() (ids []uuid.UUID) {
	for id := range m.removedseats {
		ids = append(ids, id)
	}
	return
}

// SeatsIDs returns the "seats" edge IDs in the mutation.
func (m *FlightMutation) SeatsIDs() (ids []uuid.UUID) {
	for id := range m.seats {
		ids = append(ids, id)
	}
	return
}

// ResetSeats resets all changes to the "seats" edge.
func (m *FlightMutation) ResetSeats() {
	m.seats = nil
	m.clearedseats = false
	m.removedseats = nil
}

// SetOriginID sets the "origin" edge to the Airport entity by id.
func (m *FlightMutation) SetOriginID(id uuid.UUID) {
	m.origin = &id
}

// ClearOrigin clears the "origin" edge to the Airport entity.
func (m *FlightMutation) ClearOrigin() {
	m.clearedorigin = true
}

// OriginCleared reports if the "origin" edge to the Airport entity was cleared.
func (m *FlightMutation) OriginCleared() bool {
	return m.clearedorigin
}

// OriginID returns the "origin" edge ID in the mutation.
func (m *FlightMutation) OriginID() (id uuid.UUID, exists bool) {
	if m.origin != nil {
		return *m.origin, true
	}
	return
}

// OriginIDs returns the "origin" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OriginID instead. It exists only for internal usage by the builders.
func (m *FlightMutation) OriginIDs() (ids []uuid.UUID) {
	if id := m.origin; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrigin resets all changes to the "origin" edge.
func (m *FlightMutation) ResetOrigin() {
	m.origin = nil
	m.clearedorigin = false
}

// SetDestinationID sets the "destination" edge to the Airport entity by id.
func (m *FlightMutation) SetDestinationID(id uuid.UUID) {
	m.destination = &id
}

// ClearDestination clears the "destination" edge to the Airport entity.
func (m *FlightMutation) ClearDestination() {
	m.cleareddestination = true
}

// DestinationCleared reports if the "destination" edge to the Airport entity was cleared.
func (m *FlightMutation) DestinationCleared() bool {
	return m.cleareddestination
}

// DestinationID returns the "destination" edge ID in the mutation.
func (m *FlightMutation) DestinationID() (id uuid.UUID, exists bool) {
	if m.destination != nil {
		return *m.destination, true
	}
	return
}

// DestinationIDs returns the "destination" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DestinationID instead. It exists only for internal usage by the builders.
func (m *FlightMutation) DestinationIDs() (ids []uuid.UUID) {
	if id := m.destination; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDestination resets all changes to the "destination" edge.
func (m *FlightMutation) ResetDestination() {
	m.destination = nil
	m.cleareddestination = false
}

// Where appends a list predicates to the FlightMutation builder.
func (m *FlightMutation) Where(ps ...predicate.Flight) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FlightMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FlightMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Flight, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FlightMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FlightMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Flight).
func (m *FlightMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FlightMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, flight.FieldName)
	}
	if m.departure_time != nil {
		fields = append(fields, flight.FieldDepartureTime)
	}
	if m.arrival_time != nil {
		fields = append(fields, flight.FieldArrivalTime)
	}
	if m.available_slots != nil {
		fields = append(fields, flight.FieldAvailableSlots)
	}
	if m.created_at != nil {
		fields = append(fields, flight.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FlightMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case flight.FieldName:
		return m.Name()
	case flight.FieldDepartureTime:
		return m.DepartureTime()
	case flight.FieldArrivalTime:
		return m.ArrivalTime()
	case flight.FieldAvailableSlots:
		return m.AvailableSlots()
	case flight.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FlightMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case flight.FieldName:
		return m.OldName(ctx)
	case flight.FieldDepartureTime:
		return m.OldDepartureTime(ctx)
	case flight.FieldArrivalTime:
		return m.OldArrivalTime(ctx)
	case flight.FieldAvailableSlots:
		return m.OldAvailableSlots(ctx)
	case flight.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Flight field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FlightMutation) SetField(name string, value ent.Value) error {
	switch name {
	case flight.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case flight.FieldDepartureTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartureTime(v)
		return nil
	case flight.FieldArrivalTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArrivalTime(v)
		return nil
	case flight.FieldAvailableSlots:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvailableSlots(v)
		return nil
	case flight.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Flight field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FlightMutation) AddedFields() []string {
	var fields []string
	if m.addavailable_slots != nil {
		fields = append(fields, flight.FieldAvailableSlots)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FlightMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case flight.FieldAvailableSlots:
		return m.AddedAvailableSlots()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FlightMutation) AddField(name string, value ent.Value) error {
	switch name {
	case flight.FieldAvailableSlots:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAvailableSlots(v)
		return nil
	}
	return fmt.Errorf("unknown Flight numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FlightMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FlightMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FlightMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Flight nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FlightMutation) ResetField(name string) error {
	switch name {
	case flight.FieldName:
		m.ResetName()
		return nil
	case flight.FieldDepartureTime:
		m.ResetDepartureTime()
		return nil
	case flight.FieldArrivalTime:
		m.ResetArrivalTime()
		return nil
	case flight.FieldAvailableSlots:
		m.ResetAvailableSlots()
		return nil
	case flight.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Flight field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FlightMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.seats != nil {
		edges = append(edges, flight.EdgeSeats)
	}
	if m.origin != nil {
		edges = append(edges, flight.EdgeOrigin)
	}
	if m.destination != nil {
		edges = append(edges, flight.EdgeDestination)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FlightMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case flight.EdgeSeats:
		ids := make([]ent.Value, 0, len(m.seats))
		for id := range m.seats {
			ids = append(ids, id)
		}
		return ids
	case flight.EdgeOrigin:
		if id := m.origin; id != nil {
			return []ent.Value{*id}
		}
	case flight.EdgeDestination:
		if id := m.destination; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FlightMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedseats != nil {
		edges = append(edges, flight.EdgeSeats)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FlightMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case flight.EdgeSeats:
		ids := make([]ent.Value, 0, len(m.removedseats))
		for id := range m.removedseats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FlightMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedseats {
		edges = append(edges, flight.EdgeSeats)
	}
	if m.clearedorigin {
		edges = append(edges, flight.EdgeOrigin)
	}
	if m.cleareddestination {
		edges = append(edges, flight.EdgeDestination)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FlightMutation) EdgeCleared(name string) bool {
	switch name {
	case flight.EdgeSeats:
		return m.clearedseats
	case flight.EdgeOrigin:
		return m.clearedorigin
	case flight.EdgeDestination:
		return m.cleareddestination
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FlightMutation) ClearEdge(name string) error {
	switch name {
	case flight.EdgeOrigin:
		m.ClearOrigin()
		return nil
	case flight.EdgeDestination:
		m.ClearDestination()
		return nil
	}
	return fmt.Errorf("unknown Flight unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FlightMutation) ResetEdge(name string) error {
	switch name {
	case flight.EdgeSeats:
		m.ResetSeats()
		return nil
	case flight.EdgeOrigin:
		m.ResetOrigin()
		return nil
	case flight.EdgeDestination:
		m.ResetDestination()
		return nil
	}
	return fmt.Errorf("unknown Flight edge %s", name)
}

// SeatMutation represents an operation that mutates the Seat nodes in the graph.
type SeatMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	seat_number   *string
	clearedFields map[string]struct{}
	flight        *uuid.UUID
	clearedflight bool
	done          bool
	oldValue      func(context.Context) (*Seat, error)
	predicates    []predicate.Seat
}

var _ ent.Mutation = (*SeatMutation)(nil)

// seatOption allows management of the mutation configuration using functional options.
type seatOption func(*SeatMutation)

// newSeatMutation creates new mutation for the Seat entity.
func newSeatMutation(c config, op Op, opts ...seatOption) *SeatMutation {
	m := &SeatMutation{
		config:        c,
		op:            op,
		typ:           TypeSeat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSeatID sets the ID field of the mutation.
func withSeatID(id uuid.UUID) seatOption {
	return func(m *SeatMutation) {
		var (
			err   error
			once  sync.Once
			value *Seat
		)
		m.oldValue = func(ctx context.Context) (*Seat, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Seat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSeat sets the old Seat of the mutation.
func withSeat(node *Seat) seatOption {
	return func(m *SeatMutation) {
		m.oldValue = func(context.Context) (*Seat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SeatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SeatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Seat entities.
func (m *SeatMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SeatMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SeatMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Seat.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSeatNumber sets the "seat_number" field.
func (m *SeatMutation) SetSeatNumber(s string) {
	m.seat_number = &s
}

// SeatNumber returns the value of the "seat_number" field in the mutation.
func (m *SeatMutation) SeatNumber() (r string, exists bool) {
	v := m.seat_number
	if v == nil {
		return
	}
	return *v, true
}

// OldSeatNumber returns the old "seat_number" field's value of the Seat entity.
// If the Seat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SeatMutation) OldSeatNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSeatNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSeatNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeatNumber: %w", err)
	}
	return oldValue.SeatNumber, nil
}

// ResetSeatNumber resets all changes to the "seat_number" field.
func (m *SeatMutation) ResetSeatNumber() {
	m.seat_number = nil
}

// SetFlightID sets the "flight" edge to the Flight entity by id.
func (m *SeatMutation) SetFlightID(id uuid.UUID) {
	m.flight = &id
}

// ClearFlight clears the "flight" edge to the Flight entity.
func (m *SeatMutation) ClearFlight() {
	m.clearedflight = true
}

// FlightCleared reports if the "flight" edge to the Flight entity was cleared.
func (m *SeatMutation) FlightCleared() bool {
	return m.clearedflight
}

// FlightID returns the "flight" edge ID in the mutation.
func (m *SeatMutation) FlightID() (id uuid.UUID, exists bool) {
	if m.flight != nil {
		return *m.flight, true
	}
	return
}

// FlightIDs returns the "flight" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FlightID instead. It exists only for internal usage by the builders.
func (m *SeatMutation) FlightIDs() (ids []uuid.UUID) {
	if id := m.flight; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFlight resets all changes to the "flight" edge.
func (m *SeatMutation) ResetFlight() {
	m.flight = nil
	m.clearedflight = false
}

// Where appends a list predicates to the SeatMutation builder.
func (m *SeatMutation) Where(ps ...predicate.Seat) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SeatMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SeatMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Seat, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SeatMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SeatMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Seat).
func (m *SeatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SeatMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.seat_number != nil {
		fields = append(fields, seat.FieldSeatNumber)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SeatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case seat.FieldSeatNumber:
		return m.SeatNumber()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SeatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case seat.FieldSeatNumber:
		return m.OldSeatNumber(ctx)
	}
	return nil, fmt.Errorf("unknown Seat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SeatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case seat.FieldSeatNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeatNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Seat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SeatMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SeatMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SeatMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Seat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SeatMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SeatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SeatMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Seat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SeatMutation) ResetField(name string) error {
	switch name {
	case seat.FieldSeatNumber:
		m.ResetSeatNumber()
		return nil
	}
	return fmt.Errorf("unknown Seat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SeatMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.flight != nil {
		edges = append(edges, seat.EdgeFlight)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SeatMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case seat.EdgeFlight:
		if id := m.flight; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SeatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SeatMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SeatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedflight {
		edges = append(edges, seat.EdgeFlight)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SeatMutation) EdgeCleared(name string) bool {
	switch name {
	case seat.EdgeFlight:
		return m.clearedflight
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SeatMutation) ClearEdge(name string) error {
	switch name {
	case seat.EdgeFlight:
		m.ClearFlight()
		return nil
	}
	return fmt.Errorf("unknown Seat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SeatMutation) ResetEdge(name string) error {
	switch name {
	case seat.EdgeFlight:
		m.ResetFlight()
		return nil
	}
	return fmt.Errorf("unknown Seat edge %s", name)
}
