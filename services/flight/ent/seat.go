// Code generated by ent, DO NOT EDIT.

package ent

import (
	"flookybooky/services/flight/ent/flight"
	"flookybooky/services/flight/ent/seat"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Seat is the model entity for the Seat schema.
type Seat struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// SeatNumber holds the value of the "seat_number" field.
	SeatNumber string `json:"seat_number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SeatQuery when eager-loading is set.
	Edges        SeatEdges `json:"edges"`
	flight_seats *uuid.UUID
	selectValues sql.SelectValues
}

// SeatEdges holds the relations/edges for other nodes in the graph.
type SeatEdges struct {
	// Flight holds the value of the flight edge.
	Flight *Flight `json:"flight,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FlightOrErr returns the Flight value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SeatEdges) FlightOrErr() (*Flight, error) {
	if e.loadedTypes[0] {
		if e.Flight == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: flight.Label}
		}
		return e.Flight, nil
	}
	return nil, &NotLoadedError{edge: "flight"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Seat) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case seat.FieldSeatNumber:
			values[i] = new(sql.NullString)
		case seat.FieldID:
			values[i] = new(uuid.UUID)
		case seat.ForeignKeys[0]: // flight_seats
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Seat fields.
func (s *Seat) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case seat.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case seat.FieldSeatNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field seat_number", values[i])
			} else if value.Valid {
				s.SeatNumber = value.String
			}
		case seat.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field flight_seats", values[i])
			} else if value.Valid {
				s.flight_seats = new(uuid.UUID)
				*s.flight_seats = *value.S.(*uuid.UUID)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Seat.
// This includes values selected through modifiers, order, etc.
func (s *Seat) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryFlight queries the "flight" edge of the Seat entity.
func (s *Seat) QueryFlight() *FlightQuery {
	return NewSeatClient(s.config).QueryFlight(s)
}

// Update returns a builder for updating this Seat.
// Note that you need to call Seat.Unwrap() before calling this method if this Seat
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Seat) Update() *SeatUpdateOne {
	return NewSeatClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Seat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Seat) Unwrap() *Seat {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Seat is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Seat) String() string {
	var builder strings.Builder
	builder.WriteString("Seat(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("seat_number=")
	builder.WriteString(s.SeatNumber)
	builder.WriteByte(')')
	return builder.String()
}

// Seats is a parsable slice of Seat.
type Seats []*Seat
