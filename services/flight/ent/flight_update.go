// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flookybooky/services/flight/ent/flight"
	"flookybooky/services/flight/ent/predicate"
	"flookybooky/services/flight/ent/seat"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FlightUpdate is the builder for updating Flight entities.
type FlightUpdate struct {
	config
	hooks    []Hook
	mutation *FlightMutation
}

// Where appends a list predicates to the FlightUpdate builder.
func (fu *FlightUpdate) Where(ps ...predicate.Flight) *FlightUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetName sets the "name" field.
func (fu *FlightUpdate) SetName(s string) *FlightUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetFromID sets the "from_id" field.
func (fu *FlightUpdate) SetFromID(s string) *FlightUpdate {
	fu.mutation.SetFromID(s)
	return fu
}

// SetToID sets the "to_id" field.
func (fu *FlightUpdate) SetToID(s string) *FlightUpdate {
	fu.mutation.SetToID(s)
	return fu
}

// SetStart sets the "start" field.
func (fu *FlightUpdate) SetStart(t time.Time) *FlightUpdate {
	fu.mutation.SetStart(t)
	return fu
}

// SetEnd sets the "end" field.
func (fu *FlightUpdate) SetEnd(t time.Time) *FlightUpdate {
	fu.mutation.SetEnd(t)
	return fu
}

// SetAvailableSlots sets the "available_slots" field.
func (fu *FlightUpdate) SetAvailableSlots(i int) *FlightUpdate {
	fu.mutation.ResetAvailableSlots()
	fu.mutation.SetAvailableSlots(i)
	return fu
}

// AddAvailableSlots adds i to the "available_slots" field.
func (fu *FlightUpdate) AddAvailableSlots(i int) *FlightUpdate {
	fu.mutation.AddAvailableSlots(i)
	return fu
}

// AddSeatIDs adds the "seats" edge to the Seat entity by IDs.
func (fu *FlightUpdate) AddSeatIDs(ids ...int) *FlightUpdate {
	fu.mutation.AddSeatIDs(ids...)
	return fu
}

// AddSeats adds the "seats" edges to the Seat entity.
func (fu *FlightUpdate) AddSeats(s ...*Seat) *FlightUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fu.AddSeatIDs(ids...)
}

// Mutation returns the FlightMutation object of the builder.
func (fu *FlightUpdate) Mutation() *FlightMutation {
	return fu.mutation
}

// ClearSeats clears all "seats" edges to the Seat entity.
func (fu *FlightUpdate) ClearSeats() *FlightUpdate {
	fu.mutation.ClearSeats()
	return fu
}

// RemoveSeatIDs removes the "seats" edge to Seat entities by IDs.
func (fu *FlightUpdate) RemoveSeatIDs(ids ...int) *FlightUpdate {
	fu.mutation.RemoveSeatIDs(ids...)
	return fu
}

// RemoveSeats removes "seats" edges to Seat entities.
func (fu *FlightUpdate) RemoveSeats(s ...*Seat) *FlightUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fu.RemoveSeatIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FlightUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, FlightMutation](ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FlightUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FlightUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FlightUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FlightUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(flight.Table, flight.Columns, sqlgraph.NewFieldSpec(flight.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(flight.FieldName, field.TypeString, value)
	}
	if value, ok := fu.mutation.FromID(); ok {
		_spec.SetField(flight.FieldFromID, field.TypeString, value)
	}
	if value, ok := fu.mutation.ToID(); ok {
		_spec.SetField(flight.FieldToID, field.TypeString, value)
	}
	if value, ok := fu.mutation.Start(); ok {
		_spec.SetField(flight.FieldStart, field.TypeTime, value)
	}
	if value, ok := fu.mutation.End(); ok {
		_spec.SetField(flight.FieldEnd, field.TypeTime, value)
	}
	if value, ok := fu.mutation.AvailableSlots(); ok {
		_spec.SetField(flight.FieldAvailableSlots, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedAvailableSlots(); ok {
		_spec.AddField(flight.FieldAvailableSlots, field.TypeInt, value)
	}
	if fu.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.SeatsTable,
			Columns: []string{flight.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedSeatsIDs(); len(nodes) > 0 && !fu.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.SeatsTable,
			Columns: []string{flight.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.SeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.SeatsTable,
			Columns: []string{flight.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FlightUpdateOne is the builder for updating a single Flight entity.
type FlightUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FlightMutation
}

// SetName sets the "name" field.
func (fuo *FlightUpdateOne) SetName(s string) *FlightUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetFromID sets the "from_id" field.
func (fuo *FlightUpdateOne) SetFromID(s string) *FlightUpdateOne {
	fuo.mutation.SetFromID(s)
	return fuo
}

// SetToID sets the "to_id" field.
func (fuo *FlightUpdateOne) SetToID(s string) *FlightUpdateOne {
	fuo.mutation.SetToID(s)
	return fuo
}

// SetStart sets the "start" field.
func (fuo *FlightUpdateOne) SetStart(t time.Time) *FlightUpdateOne {
	fuo.mutation.SetStart(t)
	return fuo
}

// SetEnd sets the "end" field.
func (fuo *FlightUpdateOne) SetEnd(t time.Time) *FlightUpdateOne {
	fuo.mutation.SetEnd(t)
	return fuo
}

// SetAvailableSlots sets the "available_slots" field.
func (fuo *FlightUpdateOne) SetAvailableSlots(i int) *FlightUpdateOne {
	fuo.mutation.ResetAvailableSlots()
	fuo.mutation.SetAvailableSlots(i)
	return fuo
}

// AddAvailableSlots adds i to the "available_slots" field.
func (fuo *FlightUpdateOne) AddAvailableSlots(i int) *FlightUpdateOne {
	fuo.mutation.AddAvailableSlots(i)
	return fuo
}

// AddSeatIDs adds the "seats" edge to the Seat entity by IDs.
func (fuo *FlightUpdateOne) AddSeatIDs(ids ...int) *FlightUpdateOne {
	fuo.mutation.AddSeatIDs(ids...)
	return fuo
}

// AddSeats adds the "seats" edges to the Seat entity.
func (fuo *FlightUpdateOne) AddSeats(s ...*Seat) *FlightUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fuo.AddSeatIDs(ids...)
}

// Mutation returns the FlightMutation object of the builder.
func (fuo *FlightUpdateOne) Mutation() *FlightMutation {
	return fuo.mutation
}

// ClearSeats clears all "seats" edges to the Seat entity.
func (fuo *FlightUpdateOne) ClearSeats() *FlightUpdateOne {
	fuo.mutation.ClearSeats()
	return fuo
}

// RemoveSeatIDs removes the "seats" edge to Seat entities by IDs.
func (fuo *FlightUpdateOne) RemoveSeatIDs(ids ...int) *FlightUpdateOne {
	fuo.mutation.RemoveSeatIDs(ids...)
	return fuo
}

// RemoveSeats removes "seats" edges to Seat entities.
func (fuo *FlightUpdateOne) RemoveSeats(s ...*Seat) *FlightUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fuo.RemoveSeatIDs(ids...)
}

// Where appends a list predicates to the FlightUpdate builder.
func (fuo *FlightUpdateOne) Where(ps ...predicate.Flight) *FlightUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FlightUpdateOne) Select(field string, fields ...string) *FlightUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Flight entity.
func (fuo *FlightUpdateOne) Save(ctx context.Context) (*Flight, error) {
	return withHooks[*Flight, FlightMutation](ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FlightUpdateOne) SaveX(ctx context.Context) *Flight {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FlightUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FlightUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FlightUpdateOne) sqlSave(ctx context.Context) (_node *Flight, err error) {
	_spec := sqlgraph.NewUpdateSpec(flight.Table, flight.Columns, sqlgraph.NewFieldSpec(flight.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Flight.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, flight.FieldID)
		for _, f := range fields {
			if !flight.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != flight.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(flight.FieldName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.FromID(); ok {
		_spec.SetField(flight.FieldFromID, field.TypeString, value)
	}
	if value, ok := fuo.mutation.ToID(); ok {
		_spec.SetField(flight.FieldToID, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Start(); ok {
		_spec.SetField(flight.FieldStart, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.End(); ok {
		_spec.SetField(flight.FieldEnd, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.AvailableSlots(); ok {
		_spec.SetField(flight.FieldAvailableSlots, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedAvailableSlots(); ok {
		_spec.AddField(flight.FieldAvailableSlots, field.TypeInt, value)
	}
	if fuo.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.SeatsTable,
			Columns: []string{flight.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedSeatsIDs(); len(nodes) > 0 && !fuo.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.SeatsTable,
			Columns: []string{flight.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.SeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.SeatsTable,
			Columns: []string{flight.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Flight{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
