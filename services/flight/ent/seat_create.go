// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"flookybooky/services/flight/ent/flight"
	"flookybooky/services/flight/ent/seat"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SeatCreate is the builder for creating a Seat entity.
type SeatCreate struct {
	config
	mutation *SeatMutation
	hooks    []Hook
}

// SetSeatNumber sets the "seat_number" field.
func (sc *SeatCreate) SetSeatNumber(s string) *SeatCreate {
	sc.mutation.SetSeatNumber(s)
	return sc
}

// SetID sets the "id" field.
func (sc *SeatCreate) SetID(u uuid.UUID) *SeatCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SeatCreate) SetNillableID(u *uuid.UUID) *SeatCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// SetFlightID sets the "flight" edge to the Flight entity by ID.
func (sc *SeatCreate) SetFlightID(id uuid.UUID) *SeatCreate {
	sc.mutation.SetFlightID(id)
	return sc
}

// SetNillableFlightID sets the "flight" edge to the Flight entity by ID if the given value is not nil.
func (sc *SeatCreate) SetNillableFlightID(id *uuid.UUID) *SeatCreate {
	if id != nil {
		sc = sc.SetFlightID(*id)
	}
	return sc
}

// SetFlight sets the "flight" edge to the Flight entity.
func (sc *SeatCreate) SetFlight(f *Flight) *SeatCreate {
	return sc.SetFlightID(f.ID)
}

// Mutation returns the SeatMutation object of the builder.
func (sc *SeatCreate) Mutation() *SeatMutation {
	return sc.mutation
}

// Save creates the Seat in the database.
func (sc *SeatCreate) Save(ctx context.Context) (*Seat, error) {
	sc.defaults()
	return withHooks[*Seat, SeatMutation](ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SeatCreate) SaveX(ctx context.Context) *Seat {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SeatCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SeatCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SeatCreate) defaults() {
	if _, ok := sc.mutation.ID(); !ok {
		v := seat.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SeatCreate) check() error {
	if _, ok := sc.mutation.SeatNumber(); !ok {
		return &ValidationError{Name: "seat_number", err: errors.New(`ent: missing required field "Seat.seat_number"`)}
	}
	return nil
}

func (sc *SeatCreate) sqlSave(ctx context.Context) (*Seat, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SeatCreate) createSpec() (*Seat, *sqlgraph.CreateSpec) {
	var (
		_node = &Seat{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(seat.Table, sqlgraph.NewFieldSpec(seat.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.SeatNumber(); ok {
		_spec.SetField(seat.FieldSeatNumber, field.TypeString, value)
		_node.SeatNumber = value
	}
	if nodes := sc.mutation.FlightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seat.FlightTable,
			Columns: []string{seat.FlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(flight.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.flight_seats = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SeatCreateBulk is the builder for creating many Seat entities in bulk.
type SeatCreateBulk struct {
	config
	builders []*SeatCreate
}

// Save creates the Seat entities in the database.
func (scb *SeatCreateBulk) Save(ctx context.Context) ([]*Seat, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Seat, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SeatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SeatCreateBulk) SaveX(ctx context.Context) []*Seat {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SeatCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SeatCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
