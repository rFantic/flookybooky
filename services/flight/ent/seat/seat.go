// Code generated by ent, DO NOT EDIT.

package seat

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the seat type in the database.
	Label = "seat"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSeatNumber holds the string denoting the seat_number field in the database.
	FieldSeatNumber = "seat_number"
	// EdgeFlight holds the string denoting the flight edge name in mutations.
	EdgeFlight = "flight"
	// Table holds the table name of the seat in the database.
	Table = "seats"
	// FlightTable is the table that holds the flight relation/edge.
	FlightTable = "seats"
	// FlightInverseTable is the table name for the Flight entity.
	// It exists in this package in order to avoid circular dependency with the "flight" package.
	FlightInverseTable = "flights"
	// FlightColumn is the table column denoting the flight relation/edge.
	FlightColumn = "flight_seats"
)

// Columns holds all SQL columns for seat fields.
var Columns = []string{
	FieldID,
	FieldSeatNumber,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "seats"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"flight_seats",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Seat queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySeatNumber orders the results by the seat_number field.
func BySeatNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeatNumber, opts...).ToFunc()
}

// ByFlightField orders the results by flight field.
func ByFlightField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFlightStep(), sql.OrderByField(field, opts...))
	}
}
func newFlightStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FlightInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FlightTable, FlightColumn),
	)
}
