// Code generated by ent, DO NOT EDIT.

package seat

import (
	"flookybooky/services/flight/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Seat {
	return predicate.Seat(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Seat {
	return predicate.Seat(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Seat {
	return predicate.Seat(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Seat {
	return predicate.Seat(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Seat {
	return predicate.Seat(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Seat {
	return predicate.Seat(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Seat {
	return predicate.Seat(sql.FieldLTE(FieldID, id))
}

// SeatNumber applies equality check predicate on the "seat_number" field. It's identical to SeatNumberEQ.
func SeatNumber(v string) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldSeatNumber, v))
}

// SeatNumberEQ applies the EQ predicate on the "seat_number" field.
func SeatNumberEQ(v string) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldSeatNumber, v))
}

// SeatNumberNEQ applies the NEQ predicate on the "seat_number" field.
func SeatNumberNEQ(v string) predicate.Seat {
	return predicate.Seat(sql.FieldNEQ(FieldSeatNumber, v))
}

// SeatNumberIn applies the In predicate on the "seat_number" field.
func SeatNumberIn(vs ...string) predicate.Seat {
	return predicate.Seat(sql.FieldIn(FieldSeatNumber, vs...))
}

// SeatNumberNotIn applies the NotIn predicate on the "seat_number" field.
func SeatNumberNotIn(vs ...string) predicate.Seat {
	return predicate.Seat(sql.FieldNotIn(FieldSeatNumber, vs...))
}

// SeatNumberGT applies the GT predicate on the "seat_number" field.
func SeatNumberGT(v string) predicate.Seat {
	return predicate.Seat(sql.FieldGT(FieldSeatNumber, v))
}

// SeatNumberGTE applies the GTE predicate on the "seat_number" field.
func SeatNumberGTE(v string) predicate.Seat {
	return predicate.Seat(sql.FieldGTE(FieldSeatNumber, v))
}

// SeatNumberLT applies the LT predicate on the "seat_number" field.
func SeatNumberLT(v string) predicate.Seat {
	return predicate.Seat(sql.FieldLT(FieldSeatNumber, v))
}

// SeatNumberLTE applies the LTE predicate on the "seat_number" field.
func SeatNumberLTE(v string) predicate.Seat {
	return predicate.Seat(sql.FieldLTE(FieldSeatNumber, v))
}

// SeatNumberContains applies the Contains predicate on the "seat_number" field.
func SeatNumberContains(v string) predicate.Seat {
	return predicate.Seat(sql.FieldContains(FieldSeatNumber, v))
}

// SeatNumberHasPrefix applies the HasPrefix predicate on the "seat_number" field.
func SeatNumberHasPrefix(v string) predicate.Seat {
	return predicate.Seat(sql.FieldHasPrefix(FieldSeatNumber, v))
}

// SeatNumberHasSuffix applies the HasSuffix predicate on the "seat_number" field.
func SeatNumberHasSuffix(v string) predicate.Seat {
	return predicate.Seat(sql.FieldHasSuffix(FieldSeatNumber, v))
}

// SeatNumberEqualFold applies the EqualFold predicate on the "seat_number" field.
func SeatNumberEqualFold(v string) predicate.Seat {
	return predicate.Seat(sql.FieldEqualFold(FieldSeatNumber, v))
}

// SeatNumberContainsFold applies the ContainsFold predicate on the "seat_number" field.
func SeatNumberContainsFold(v string) predicate.Seat {
	return predicate.Seat(sql.FieldContainsFold(FieldSeatNumber, v))
}

// HasFlight applies the HasEdge predicate on the "flight" edge.
func HasFlight() predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FlightTable, FlightColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFlightWith applies the HasEdge predicate on the "flight" edge with a given conditions (other predicates).
func HasFlightWith(preds ...predicate.Flight) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		step := newFlightStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Seat) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Seat) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Seat) predicate.Seat {
	return predicate.Seat(func(s *sql.Selector) {
		p(s.Not())
	})
}
