// Code generated by ent, DO NOT EDIT.

package pet

import (
	"flookybooky/pet/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldName, v))
}

// Species applies equality check predicate on the "species" field. It's identical to SpeciesEQ.
func Species(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldSpecies, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContainsFold(FieldName, v))
}

// SpeciesEQ applies the EQ predicate on the "species" field.
func SpeciesEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldSpecies, v))
}

// SpeciesNEQ applies the NEQ predicate on the "species" field.
func SpeciesNEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldSpecies, v))
}

// SpeciesIn applies the In predicate on the "species" field.
func SpeciesIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldSpecies, vs...))
}

// SpeciesNotIn applies the NotIn predicate on the "species" field.
func SpeciesNotIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldSpecies, vs...))
}

// SpeciesGT applies the GT predicate on the "species" field.
func SpeciesGT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldSpecies, v))
}

// SpeciesGTE applies the GTE predicate on the "species" field.
func SpeciesGTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldSpecies, v))
}

// SpeciesLT applies the LT predicate on the "species" field.
func SpeciesLT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldSpecies, v))
}

// SpeciesLTE applies the LTE predicate on the "species" field.
func SpeciesLTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldSpecies, v))
}

// SpeciesContains applies the Contains predicate on the "species" field.
func SpeciesContains(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContains(FieldSpecies, v))
}

// SpeciesHasPrefix applies the HasPrefix predicate on the "species" field.
func SpeciesHasPrefix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasPrefix(FieldSpecies, v))
}

// SpeciesHasSuffix applies the HasSuffix predicate on the "species" field.
func SpeciesHasSuffix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasSuffix(FieldSpecies, v))
}

// SpeciesEqualFold applies the EqualFold predicate on the "species" field.
func SpeciesEqualFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEqualFold(FieldSpecies, v))
}

// SpeciesContainsFold applies the ContainsFold predicate on the "species" field.
func SpeciesContainsFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContainsFold(FieldSpecies, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pet) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pet) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pet) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		p(s.Not())
	})
}
